<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Couchbase.Lite</name>
    </assembly>
    <members>
        <member name="T:Couchbase.Lite.Attachment">
            <summary>
            A Couchbase Lite Document Attachment.
            </summary></member>
        <member name="P:Couchbase.Lite.Attachment.Compressed">
            <summary>
            Content stream is gzip encoded.
            </summary>
            <value><c>true</c> if compressed; otherwise, <c>false</c>.</value></member>
        <member name="M:Couchbase.Lite.Attachment.InstallAttachmentBodies(System.Collections.Generic.IDictionary{System.String,System.Object},Couchbase.Lite.Database)">
            <summary>
            Goes through an _attachments dictionary and replaces any values that are Attachment objects
            with proper JSON metadata dicts.
            </summary>
            <remarks>
            Goes through an _attachments dictionary and replaces any values that are Attachment objects
            with proper JSON metadata dicts. It registers the attachment bodies with the blob store and sets
            the metadata 'digest' and 'follows' properties accordingly.
            </remarks></member>
        <member name="P:Couchbase.Lite.Attachment.Revision">
            <summary>
            Gets the owning <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>the owning <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.Attachment.Document">
            <summary>
            Gets the owning <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The owning <see cref="T:Couchbase.Lite.Document" /></value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="P:Couchbase.Lite.Attachment.Name">
            <summary>
            Gets the name of the <see cref="T:Couchbase.Lite.Attachment" />.
            </summary>
            <value>The name of the <see cref="T:Couchbase.Lite.Attachment" />.</value></member>
        <member name="P:Couchbase.Lite.Attachment.ContentType">
            <summary>
            Gets the content-type.
            </summary>
            <value>The content-type.</value></member>
        <member name="P:Couchbase.Lite.Attachment.ContentStream">
            <summary>
            Get the <see cref="T:Couchbase.Lite.Attachment" /> content stream.  The caller must not
            dispose it.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Attachment" /> content stream.</value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an error occurs when getting the content stream.
            </exception></member>
        <member name="P:Couchbase.Lite.Attachment.Content">
            <summary>Gets the <see cref="T:Couchbase.Lite.Attachment" /> content.</summary>
            <value>The <see cref="T:Couchbase.Lite.Attachment" /> content</value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an error occurs when getting the content.
            </exception></member>
        <member name="P:Couchbase.Lite.Attachment.Length">
            <summary>
            Gets the length in bytes of the content.
            </summary>
            <value>The length in bytes of the content.</value></member>
        <!--FIXME: Invalid documentation markup was found for member P:Couchbase.Lite.Attachment.Metadata-->
        <member name="T:Couchbase.Lite.Database">
            <summary>
            A Couchbase Lite Database.
            </summary></member>
        <member name="M:Couchbase.Lite.Database.#ctor(System.String,Couchbase.Lite.Manager)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Lite.Database" /> class.
            </summary>
            <param name="path">Path.</param>
            <param name="manager">Manager.</param></member>
        <member name="P:Couchbase.Lite.Database.FilterCompiler">
            <summary>
            Gets or sets an object that can compile source code into <see cref="T:Couchbase.Lite.FilterDelegate" />.
            </summary>
            <value>The filter compiler object.</value></member>
        <member name="P:Couchbase.Lite.Database.Name">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> name.
            </summary>
            <value>The database name.</value></member>
        <!--FIXME: Invalid documentation markup was found for member P:Couchbase.Lite.Database.Manager-->
        <!--FIXME: Invalid documentation markup was found for member P:Couchbase.Lite.Database.DocumentCount-->
        <member name="P:Couchbase.Lite.Database.LastSequenceNumber">
            <summary>
            Gets the latest sequence number used by the <see cref="T:Couchbase.Lite.Database" />.  Every new <see cref="T:Couchbase.Lite.Revision" /> is assigned a new sequence
            number, so this property increases monotonically as changes are made to the <see cref="T:Couchbase.Lite.Database" />. This can be used to
            check whether the <see cref="T:Couchbase.Lite.Database" /> has changed between two points in time.
            </summary>
            <value>The last sequence number.</value></member>
        <member name="P:Couchbase.Lite.Database.AllReplications">
            <summary>
            Gets all the running <see cref="T:Couchbase.Lite.Replication" />s
            for this <see cref="T:Couchbase.Lite.Database" />.
            This includes all continuous <see cref="T:Couchbase.Lite.Replication" />s and
            any non-continuous <see cref="T:Couchbase.Lite.Replication" />s that has been started
            and are still running.
            </summary>
            <value>All replications.</value></member>
        <member name="M:Couchbase.Lite.Database.Compact">
            <summary>
            Compacts the <see cref="T:Couchbase.Lite.Database" /> file by purging non-current
            <see cref="T:Couchbase.Lite.Revision" />s and deleting unused <see cref="T:Couchbase.Lite.Attachment" />s.
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">thrown if an issue occurs while
            compacting the <see cref="T:Couchbase.Lite.Database" /></exception></member>
        <member name="M:Couchbase.Lite.Database.Delete">
            <summary>
            Deletes the <see cref="T:Couchbase.Lite.Database" />.
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while deleting the <see cref="T:Couchbase.Lite.Database" /></exception></member>
        <member name="M:Couchbase.Lite.Database.GetDocument(System.String)">
            <summary>
            Gets or creates the <see cref="T:Couchbase.Lite.Document" /> with the given id.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.Document" />.</returns>
            <param name="id">The id of the Document to get or create.</param></member>
        <member name="M:Couchbase.Lite.Database.GetExistingDocument(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document" /> with the given id, or null if it does not exist.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.Document" /> with the given id, or null if it does not exist.</returns>
            <param name="id">The id of the Document to get.</param></member>
        <member name="M:Couchbase.Lite.Database.CreateDocument">
            <summary>
            Creates a <see cref="T:Couchbase.Lite.Document" /> with a unique id.
            </summary>
            <returns>A document with a unique id.</returns></member>
        <member name="M:Couchbase.Lite.Database.GetExistingLocalDocument(System.String)">
            <summary>
            Gets the local document with the given id, or null if it does not exist.
            </summary>
            <returns>The existing local document.</returns>
            <param name="id">Identifier.</param></member>
        <member name="M:Couchbase.Lite.Database.PutLocalDocument(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the contents of the local <see cref="T:Couchbase.Lite.Document" /> with the given id.  If <param name="properties" /> is null, the
            <see cref="T:Couchbase.Lite.Document" /> is deleted.
            </summary>
            <param name="id">The id of the local document whos contents to set.</param>
            <param name="properties">The contents to set for the local document.</param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown if an issue occurs
            while setting the contents of the local document.</exception></member>
        <member name="M:Couchbase.Lite.Database.DeleteLocalDocument(System.String)">
            <summary>
            Deletes the local <see cref="T:Couchbase.Lite.Document" /> with the given id.
            </summary>
            <returns><c>true</c>, if local <see cref="T:Couchbase.Lite.Document" /> was deleted, <c>false</c> otherwise.</returns>
            <param name="id">Identifier.</param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown if there is an issue occurs while deleting the local document.</exception></member>
        <member name="M:Couchbase.Lite.Database.CreateAllDocumentsQuery">
            <summary>
            Creates a <see cref="T:Couchbase.Lite.Query" /> that matches all <see cref="T:Couchbase.Lite.Document" />s in the <see cref="T:Couchbase.Lite.Database" />.
            </summary>
            <returns>Returns a <see cref="T:Couchbase.Lite.Query" /> that matches all <see cref="T:Couchbase.Lite.Document" />s in the <see cref="T:Couchbase.Lite.Database" />s.</returns></member>
        <member name="M:Couchbase.Lite.Database.GetView(System.String)">
            <summary>
            Gets or creates the <see cref="T:Couchbase.Lite.View" /> with the given name.
            New <see cref="T:Couchbase.Lite.View" />s won't be added to the <see cref="T:Couchbase.Lite.Database" />
            until a map function is assigned.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.View" /> with the given name.</returns>
            <param name="name">The name of the <see cref="T:Couchbase.Lite.View" /> to get or create.</param></member>
        <member name="M:Couchbase.Lite.Database.GetExistingView(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.View" /> with the given name, or null if it does not exist.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.View" /> with the given name, or null if it does not exist.</returns>
            <param name="name">The name of the View to get.</param></member>
        <member name="M:Couchbase.Lite.Database.GetValidation(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.ValidateDelegate" /> for the given name, or null if it does not exist.
            </summary>
            <returns>the <see cref="T:Couchbase.Lite.ValidateDelegate" /> for the given name, or null if it does not exist.</returns>
            <param name="name">The name of the validation delegate to get.</param></member>
        <member name="M:Couchbase.Lite.Database.SetValidation(System.String,Couchbase.Lite.ValidateDelegate)">
            <summary>
            Sets the validation delegate for the given name. If delegate is null,
            the validation with the given name is deleted. Before any change
            to the <see cref="T:Couchbase.Lite.Database" /> is committed, including incoming changes from a pull
            <see cref="T:Couchbase.Lite.Replication" />, all of its validation delegates are called and given
            a chance to reject it.
            </summary>
            <param name="name">The name of the validation delegate to set.</param>
            <param name="validationDelegate">The validation delegate to set.</param></member>
        <member name="M:Couchbase.Lite.Database.GetFilter(System.String,Couchbase.Lite.Status)">
            <summary>
            Returns the <see cref="T:Couchbase.Lite.ValidateDelegate" /> for the given name, or null if it does not exist.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.ValidateDelegate" /> for the given name, or null if it does not exist.</returns>
            <param name="name">The name of the validation delegate to get.</param></member>
        <member name="M:Couchbase.Lite.Database.SetFilter(System.String,Couchbase.Lite.FilterDelegate)">
            <summary>
            Sets the <see cref="T:Couchbase.Lite.ValidateDelegate" /> for the given name. If delegate is null, the filter
            with the given name is deleted. Before a <see cref="T:Couchbase.Lite.Revision" /> is replicated via a
            push <see cref="T:Couchbase.Lite.Replication" />, its filter delegate is called and
            given a chance to exclude it from the <see cref="T:Couchbase.Lite.Replication" />.
            </summary>
            <param name="name">The name of the filter delegate to set.</param>
            <param name="filterDelegate">The filter delegate to set.</param></member>
        <member name="M:Couchbase.Lite.Database.RunAsync(Couchbase.Lite.RunAsyncDelegate)">
            <summary>
            Runs the <see cref="T:Couchbase.Lite.RunAsyncDelegate" /> asynchronously.
            </summary>
            <returns>The async task.</returns>
            <param name="runAsyncDelegate">The delegate to run asynchronously.</param></member>
        <member name="M:Couchbase.Lite.Database.RunInTransaction(Couchbase.Lite.RunInTransactionDelegate)">
            <summary>
            Runs the delegate within a transaction. If the delegate returns false,
            the transaction is rolled back.
            </summary>
            <returns>True if the transaction was committed, otherwise false.</returns>
            <param name="transactionDelegate">The delegate to run within a transaction.</param></member>
        <member name="M:Couchbase.Lite.Database.CreatePushReplication(System.Uri)">
            <summary>
            Creates a new <see cref="T:Couchbase.Lite.Replication" /> that will push to the target <see cref="T:Couchbase.Lite.Database" /> at the given url.
            </summary>
            <returns>A new <see cref="T:Couchbase.Lite.Replication" /> that will push to the target <see cref="T:Couchbase.Lite.Database" /> at the given url.</returns>
            <param name="url">The url of the target Database.</param></member>
        <member name="M:Couchbase.Lite.Database.CreatePullReplication(System.Uri)">
            <summary>
            Creates a new <see cref="T:Couchbase.Lite.Replication" /> that will pull from the source <see cref="T:Couchbase.Lite.Database" /> at the given url.
            </summary>
            <returns>A new <see cref="T:Couchbase.Lite.Replication" /> that will pull from the source Database at the given url.</returns>
            <param name="url">The url of the source Database.</param></member>
        <member name="E:Couchbase.Lite.Database.Changed">
            <summary>
            Event handler delegate that will be called whenever a <see cref="T:Couchbase.Lite.Document" /> within the <see cref="T:Couchbase.Lite.Database" /> changes.
            </summary></member>
        <member name="F:Couchbase.Lite.Database._persistentCookieStore">
            <summary>
            Each database can have an associated PersistentCookieStore,
            where the persistent cookie store uses the database to store
            its cookies.
            </summary>
            <remarks>
            Each database can have an associated PersistentCookieStore,
            where the persistent cookie store uses the database to store
            its cookies.
            There are two reasons this has been made an instance variable
            of the Database, rather than of the Replication:
            - The PersistentCookieStore needs to span multiple replications.
            For example, if there is a "push" and a "pull" replication for
            the same DB, they should share a cookie store.
            - PersistentCookieStore lifecycle should be tied to the Database
            lifecycle, since it needs to cease to exist if the underlying
            Database ceases to exist.
            REF: https://github.com/couchbase/couchbase-lite-android/issues/269
            </remarks></member>
        <member name="P:Couchbase.Lite.Database.MaxRevTreeDepth">
            <summary>
            Maximum depth of a document's revision tree (or, max length of its revision history.)
            Revisions older than this limit will be deleted during a -compact: operation.
            </summary>
            <remarks>
            Maximum depth of a document's revision tree (or, max length of its revision history.)
            Revisions older than this limit will be deleted during a -compact: operation.
            Smaller values save space, at the expense of making document conflicts somewhat more likely.
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.DeleteLocalDocument(System.String,System.String)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.ForceInsert(Couchbase.Lite.Internal.RevisionInternal,System.Collections.Generic.IList{System.String},System.Uri,Couchbase.Lite.Status)">
            <summary>Inserts an already-existing revision replicated from a remote sqliteDb.</summary>
            <remarks>
            Inserts an already-existing revision replicated from a remote sqliteDb.
            It must already have a revision ID. This may create a conflict! The revision's history must be given; ancestor revision IDs that don't already exist locally will create phantom revisions with no content.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.QueryViewNamed(System.String,Couchbase.Lite.QueryOptions,System.Collections.Generic.IList{System.Int64})">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.GetAllDocs(Couchbase.Lite.QueryOptions)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.WinningRevIDOfDoc(System.Int64,System.Collections.Generic.IList{System.Boolean},System.Collections.Generic.IList{System.Boolean},System.Boolean)">
            <summary>Returns the rev ID of the 'winning' revision of this document, and whether it's deleted.</summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.GetDeletedColumnIndex(Couchbase.Lite.QueryOptions)">
            <summary>Hack because cursor interface does not support cursor.getColumnIndex("deleted") yet.
            </summary></member>
        <member name="M:Couchbase.Lite.Database.SlowQuery(Couchbase.Lite.MapDelegate)">
            <summary>
            Creates a one-shot query with the given map function. This is equivalent to creating an
            anonymous View and then deleting it immediately after querying it. It may be useful during
            development, but in general this is inefficient if this map will be used more than once,
            because the entire view has to be regenerated from scratch every time.
            </summary>
            <returns>The query.</returns>
            <param name="map">Map.</param></member>
        <member name="M:Couchbase.Lite.Database.GetLastSequenceNumber">
            <summary>The latest sequence number used.</summary>
            <remarks>
            The latest sequence number used.  Every new revision is assigned a new sequence number,
            so this property increases monotonically as changes are made to the database. It can be
            used to check whether the database has changed between two points in time.
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.LongForQuery(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <exception cref="T:Couchbase.Lite.Storage.SQLException"></exception></member>
        <member name="M:Couchbase.Lite.Database.PurgeRevisions(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>Purges specific revisions, which deletes them completely from the local database _without_ adding a "tombstone" revision.
            </summary>
            <remarks>
            Purges specific revisions, which deletes them completely from the local database _without_ adding a "tombstone" revision. It's as though they were never there.
            This operation is described here: http://wiki.apache.org/couchdb/Purge_Documents
            </remarks>
            <param name="docsToRevs">A dictionary mapping document IDs to arrays of revision IDs.
            </param>
            <resultOn>success will point to an NSDictionary with the same form as docsToRev, containing the doc/revision IDs that were actually removed.
            </resultOn></member>
        <member name="M:Couchbase.Lite.Database.BeginTransaction">
            <summary>Begins a database transaction.</summary>
            <remarks>
            Begins a database transaction. Transactions can nest.
            Every beginTransaction() must be balanced by a later endTransaction()
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.EndTransaction(System.Boolean)">
            <summary>Commits or aborts (rolls back) a transaction.</summary>
            <param name="commit">If true, commits; if false, aborts and rolls back, undoing all changes made since the matching -beginTransaction call, *including* any committed nested transactions.
            </param></member>
        <member name="M:Couchbase.Lite.Database.ExpandStoredJSONIntoRevisionWithAttachments(System.Collections.Generic.IEnumerable{System.Byte},Couchbase.Lite.Internal.RevisionInternal,Couchbase.Lite.DocumentContentOptions)">
            <summary>Inserts the _id, _rev and _attachments properties into the JSON data and stores it in rev.
            </summary>
            <remarks>
            Inserts the _id, _rev and _attachments properties into the JSON data and stores it in rev.
            Rev must already have its revID and sequence properties set.
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.ExtraPropertiesForRevision(Couchbase.Lite.Internal.RevisionInternal,Couchbase.Lite.DocumentContentOptions)">
            <summary>Inserts the _id, _rev and _attachments properties into the JSON data and stores it in rev.
            </summary>
            <remarks>
            Inserts the _id, _rev and _attachments properties into the JSON data and stores it in rev.
            Rev must already have its revID and sequence properties set.
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.GetRevisionHistory(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Returns an array of TDRevs in reverse chronological order, starting with the given revision.
            </summary>
            <remarks>Returns an array of TDRevs in reverse chronological order, starting with the given revision.
            </remarks></member>
        <member name="M:Couchbase.Lite.Database.GetRevisionHistoryDict(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Returns the revision history as a _revisions dictionary, as returned by the REST API's ?revs=true option.
            </summary></member>
        <member name="M:Couchbase.Lite.Database.ParseCouchDBRevisionHistory(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Parses the _revisions dict from a document into an array of revision ID strings.</summary></member>
        <member name="M:Couchbase.Lite.Database.AppendDictToJSON(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Splices the contents of an NSDictionary into JSON data (that already represents a dict), without parsing the JSON.</summary></member>
        <member name="M:Couchbase.Lite.Database.PutRevision(Couchbase.Lite.Internal.RevisionInternal,System.String,Couchbase.Lite.Status)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.PutRevision(Couchbase.Lite.Internal.RevisionInternal,System.String,System.Boolean)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.PutRevision(Couchbase.Lite.Internal.RevisionInternal,System.String,System.Boolean,Couchbase.Lite.Status)">
            <summary>Stores a new (or initial) revision of a document.</summary>
            <remarks>
            Stores a new (or initial) revision of a document.
            This is what's invoked by a PUT or POST. As with those, the previous revision ID must be supplied when necessary and the call will fail if it doesn't match.
            </remarks>
            <param name="oldRev">The revision to add. If the docID is null, a new UUID will be assigned. Its revID must be null. It must have a JSON body.
            </param>
            <param name="prevRevId">The ID of the revision to replace (same as the "?rev=" parameter to a PUT), or null if this is a new document.
            </param>
            <param name="allowConflict">If false, an error status 409 will be returned if the insertion would create a conflict, i.e. if the previous revision already has a child.
            </param>
            <param name="resultStatus">On return, an HTTP status code indicating success or failure.
            </param>
            <returns>A new RevisionInternal with the docID, revID and sequence filled in (but no body).
            </returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.ProcessAttachmentsForRevision(System.Collections.Generic.IDictionary{System.String,Couchbase.Lite.Internal.AttachmentInternal},Couchbase.Lite.Internal.RevisionInternal,System.Int64)">
            <summary>
            Given a newly-added revision, adds the necessary attachment rows to the sqliteDb and
            stores inline attachments into the blob store.
            </summary>
            <remarks>
            Given a newly-added revision, adds the necessary attachment rows to the sqliteDb and
            stores inline attachments into the blob store.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.InsertAttachmentForSequenceWithNameAndType(Sharpen.InputStream,System.Int64,System.String,System.String,System.Int32)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.InstallAttachment(Couchbase.Lite.Internal.AttachmentInternal,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.GetAttachmentsFromRevision(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>
            Given a revision, read its _attachments dictionary (if any), convert each attachment to a
            AttachmentInternal object, and return a dictionary mapping names-&gt;CBL_Attachments.
            </summary>
            <remarks>
            Given a revision, read its _attachments dictionary (if any), convert each attachment to a
            AttachmentInternal object, and return a dictionary mapping names-&gt;CBL_Attachments.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.LoadRevisionBody(Couchbase.Lite.Internal.RevisionInternal,Couchbase.Lite.DocumentContentOptions)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.FindMissingRevisions(Couchbase.Lite.RevisionList)">
            <exception cref="T:Couchbase.Lite.Storage.SQLException"></exception></member>
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.Database.IsValidDocumentId(System.String)-->
        <member name="M:Couchbase.Lite.Database.UpdateAttachment(System.String,Couchbase.Lite.BlobStoreWriter,System.String,Couchbase.Lite.Internal.AttachmentEncoding,System.String,System.String)">
            <summary>Updates or deletes an attachment, creating a new document revision in the process.
            </summary>
            <remarks>
            Updates or deletes an attachment, creating a new document revision in the process.
            Used by the PUT / DELETE methods called on attachment URLs.
            </remarks>
            <exclude></exclude>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Database.ValidateRevision(Couchbase.Lite.Internal.RevisionInternal,Couchbase.Lite.Internal.RevisionInternal,System.String)">
            <summary>VALIDATION</summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="T:Couchbase.Lite.ValidateChangeDelegate">
            <summary>
            A delegate that can validate a key/value change.
            </summary></member>
        <member name="T:Couchbase.Lite.RunAsyncDelegate">
            <summary>
            A delegate that can be run asynchronously on a <see cref="T:Couchbase.Lite.Database" />.
            </summary></member>
        <member name="T:Couchbase.Lite.ValidateDelegate">
            <summary>
            A delegate that can be used to accept/reject new <see cref="T:Couchbase.Lite.Revision" />s being added to a <see cref="T:Couchbase.Lite.Database" />.
            </summary></member>
        <member name="T:Couchbase.Lite.FilterDelegate">
            <summary>
            A delegate that can be used to include/exclude <see cref="T:Couchbase.Lite.Revision" />s during push <see cref="T:Couchbase.Lite.Replication" />.
            </summary></member>
        <member name="T:Couchbase.Lite.RunInTransactionDelegate">
            <summary>
            A delegate that can be run in a transaction on a <see cref="T:Couchbase.Lite.Database" />.
            </summary></member>
        <member name="T:Couchbase.Lite.DatabaseChangeEventArgs">
            <summary>The event raised when a <see cref="T:Couchbase.Lite.Database" /> changes</summary></member>
        <member name="P:Couchbase.Lite.DatabaseChangeEventArgs.Source">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> that raised the event.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Database" /> that raised the event.</value></member>
        <member name="P:Couchbase.Lite.DatabaseChangeEventArgs.IsExternal">
            <summary>
            Returns true if the change was not made by a Document belonging to this Database
            (e.g. it came from another process or from a pull Replication), otherwise false.
            </summary>
            <value>true if the change was not made by a Document belonging to this Database
            (e.g. it came from another process or from a pull Replication), otherwise false</value></member>
        <member name="P:Couchbase.Lite.DatabaseChangeEventArgs.Changes">
            <summary>
            Gets the DocumentChange details for the Documents that caused the Database change.
            </summary>
            <value>The DocumentChange details for the Documents that caused the Database change.</value></member>
        <member name="T:Couchbase.Lite.Document">
            <summary>
            A Couchbase Lite Document.
            </summary></member>
        <member name="M:Couchbase.Lite.Document.#ctor(Couchbase.Lite.Database,System.String)">
            <summary>Constructor</summary>
            <param name="database">The document's owning database</param>
            <param name="documentId">The document's ID</param></member>
        <member name="P:Couchbase.Lite.Document.Database">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> that owns this <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Database" /> that owns this <see cref="T:Couchbase.Lite.Document" />.</value></member>
        <member name="P:Couchbase.Lite.Document.Id">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document" />'s id.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Document" />'s id.</value></member>
        <member name="P:Couchbase.Lite.Document.Deleted">
            <summary>
            Gets if the <see cref="T:Couchbase.Lite.Document" /> is deleted.
            </summary>
            <value><c>true</c> if deleted; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Document.CurrentRevisionId">
            <summary>
            If known, gets the Id of the current <see cref="T:Couchbase.Lite.Revision" />, otherwise null.
            </summary>
            <value>The Id of the current <see cref="T:Couchbase.Lite.Revision" /> if known, otherwise null.</value></member>
        <member name="P:Couchbase.Lite.Document.CurrentRevision">
            <summary>
            Gets the current/latest <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The current/latest <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.Document.RevisionHistory">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document" />'s <see cref="T:Couchbase.Lite.Revision" /> history
            in forward order. Older, ancestor, <see cref="T:Couchbase.Lite.Revision" />s are not guaranteed to
            have their properties available.
            </summary>
            <value>
            The <see cref="T:Couchbase.Lite.Document" />'s <see cref="T:Couchbase.Lite.Revision" /> history
            in forward order.
            </value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while getting the Revision history.
            </exception></member>
        <member name="P:Couchbase.Lite.Document.ConflictingRevisions">
            <summary>
            Gets all of the current conflicting <see cref="T:Couchbase.Lite.Revision" />s for the
            <see cref="T:Couchbase.Lite.Document" />. If the <see cref="T:Couchbase.Lite.Document" /> is not in conflict,
            only the single current <see cref="T:Couchbase.Lite.Revision" /> will be returned.
            </summary>
            <value>
            All of the current conflicting <see cref="T:Couchbase.Lite.Revision" />s for the
            <see cref="T:Couchbase.Lite.Document" />.
            </value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while getting the conflicting <see cref="T:Couchbase.Lite.Revision" />s.
            </exception></member>
        <member name="P:Couchbase.Lite.Document.LeafRevisions">
            <summary>
            Gets all of the leaf <see cref="T:Couchbase.Lite.Revision" />s in the <see cref="T:Couchbase.Lite.Document" />'s
            <see cref="T:Couchbase.Lite.Revision" /> tree.
            </summary>
            <value>
            All of the leaf <see cref="T:Couchbase.Lite.Revision" />s in the <see cref="T:Couchbase.Lite.Document" />'s
            <see cref="T:Couchbase.Lite.Revision" /> tree.
            </value>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while getting the leaf <see cref="T:Couchbase.Lite.Revision" />s.
            </exception></member>
        <member name="P:Couchbase.Lite.Document.Properties">
            <summary>
            Gets the properties of the current <see cref="T:Couchbase.Lite.Revision" /> of
            the <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <remarks>
            The contents of the current revision of the document.
            This is shorthand for self.currentRevision.properties.
            Any keys in the dictionary that begin with "_", such as "_id" and "_rev",
            contain CouchbaseLite metadata.
            </remarks>
            <value>
            The properties of the current <see cref="T:Couchbase.Lite.Revision" /> of
            the <see cref="T:Couchbase.Lite.Document" />
            </value></member>
        <member name="P:Couchbase.Lite.Document.UserProperties">
            <summary>
            Gets the properties of the current <see cref="T:Couchbase.Lite.Revision" /> of the
            <see cref="T:Couchbase.Lite.Document" /> without any properties
            with keys prefixed with '_' (which contain Couchbase Lite data).
            </summary>
            <remarks>
            The user-defined properties, without the ones reserved by CouchDB.
            This is based on -properties, with every key whose name starts with "_" removed.
            </remarks>
            <value>
            The properties of the current <see cref="T:Couchbase.Lite.Revision" /> of the
            <see cref="T:Couchbase.Lite.Document" /> without any properties
            with keys prefixed with '_'.
            </value></member>
        <member name="M:Couchbase.Lite.Document.Delete">
            <summary>
            Deletes the <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <remarks>
            Deletes the <see cref="T:Couchbase.Lite.Document" /> by adding a deletion <see cref="T:Couchbase.Lite.Revision" />.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while deleting the <see cref="T:Couchbase.Lite.Document" />.
            </exception></member>
        <member name="M:Couchbase.Lite.Document.Purge">
            <summary>
            Completely purges the <see cref="T:Couchbase.Lite.Document" /> from the local <see cref="T:Couchbase.Lite.Database" />.
            This is different from delete in that it completely deletes everything related to the
            <see cref="T:Couchbase.Lite.Document" /> and does not replicate the deletes to other <see cref="T:Couchbase.Lite.Database" />s.
            </summary>
            <remarks>
            Purges this document from the database; this is more than deletion, it forgets entirely about it.
            The purge will NOT be replicated to other databases.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while purging the <see cref="T:Couchbase.Lite.Document" />.
            </exception></member>
        <member name="M:Couchbase.Lite.Document.GetRevision(System.String)">
            <summary>
            Returns the <see cref="T:Couchbase.Lite.Revision" /> with the specified id if it exists, otherwise null.
            </summary>
            <param name="id">The <see cref="T:Couchbase.Lite.Revision" /> id.</param>
            <returns>The <see cref="T:Couchbase.Lite.Revision" /> with the specified id if it exists, otherwise null</returns></member>
        <member name="M:Couchbase.Lite.Document.CreateRevision">
            <summary>
            Creates a new <see cref="T:Couchbase.Lite.UnsavedRevision" /> whose properties and attachments are initially
            identical to the current <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <remarks>
            Creates an unsaved new revision whose parent is the currentRevision,
            or which will be the first revision if the document doesn't exist yet.
            You can modify this revision's properties and attachments, then save it.
            No change is made to the database until/unless you save the new revision.
            </remarks>
            <returns>
            A new <see cref="T:Couchbase.Lite.UnsavedRevision" /> whose properties and attachments are initially
            identical to the current <see cref="T:Couchbase.Lite.Revision" />
            </returns></member>
        <member name="M:Couchbase.Lite.Document.GetProperty(System.String)">
            <summary>
            Returns the value of the property with the specified key.
            </summary>
            <returns>The value of the property with the specified key.</returns>
            <param name="key">The key of the property value to return.</param></member>
        <member name="M:Couchbase.Lite.Document.GetProperty``1(System.String)">
            <summary>
            Returns the TValue of the property with the specified key.
            </summary>
            <returns>The value of the property with the specified key as TValue.</returns>
            <param name="key">The key of the property value to return.</param></member>
        <member name="M:Couchbase.Lite.Document.PutProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates and saves a new <see cref="T:Couchbase.Lite.Revision" /> with the specified properties.
            To succeed the specified properties must include a '_rev' property whose value maches
            the current <see cref="T:Couchbase.Lite.Revision" />'s id.
            </summary>
            <remarks>
            Saves a new revision. The properties dictionary must have a "_rev" property
            whose ID matches the current revision's (as it will if it's a modified
            copy of this document's .properties property.)
            </remarks>
            <param name="properties">The properties to set on the new Revision.</param>
            <returns>The new <see cref="T:Couchbase.Lite.SavedRevision" /></returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an error occurs while creating or saving the new <see cref="T:Couchbase.Lite.Revision" />.
            </exception></member>
        <member name="M:Couchbase.Lite.Document.Update(Couchbase.Lite.Document.UpdateDelegate)">
            <summary>
            Creates and saves a new <see cref="T:Couchbase.Lite.Revision" /> by allowing the caller to update
            the existing properties. Conflicts are handled by calling the delegate again.
            </summary>
            <remarks>
            Saves a new revision by letting the caller update the existing properties.
            This method handles conflicts by retrying (calling the block again).
            The DocumentUpdater implementation should modify the properties of the new revision and return YES to save or
            NO to cancel. Be careful: the DocumentUpdater can be called multiple times if there is a conflict!
            </remarks>
            <param name="updateDelegate">
            The delegate that will be called to update the new <see cref="T:Couchbase.Lite.Revision" />'s properties.
            return YES, or just return NO to cancel.
            </param>
            <returns>The new <see cref="T:Couchbase.Lite.SavedRevision" />, or null on error or cancellation.</returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an error occurs while creating or saving the new <see cref="T:Couchbase.Lite.Revision" />.
            </exception></member>
        <member name="E:Couchbase.Lite.Document.Change">
            <summary>
            Adds or Removed a change delegate that will be called whenever the Document changes
            </summary></member>
        <member name="M:Couchbase.Lite.Document.PutProperties(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.Document.GetLeafRevisions(System.Boolean)">
            <summary>
            Returns all the leaf revisions in the document's revision tree,
            including deleted revisions (i.e.
            </summary>
            <remarks>
            Returns all the leaf revisions in the document's revision tree,
            including deleted revisions (i.e. previously-resolved conflicts.)
            </remarks>
            <returns>all the leaf revisions in the document's revision tree</returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="T:Couchbase.Lite.Document.UpdateDelegate">
            <summary>
            A delegate that can be used to update a <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <param name="revision">
            The <see cref="T:Couchbase.Lite.UnsavedRevision" /> to update.
            </param>
            <returns>
            True if the <see cref="T:Couchbase.Lite.UnsavedRevision" /> should be saved, otherwise false.
            </returns></member>
        <member name="T:Couchbase.Lite.Document.DocumentChangeEventArgs">
            <summary>
            The type of event raised when a <see cref="T:Couchbase.Lite.Document" /> changes.
            This event is not raised in response to local <see cref="T:Couchbase.Lite.Document" /> changes.
            </summary></member>
        <member name="P:Couchbase.Lite.Document.DocumentChangeEventArgs.Source">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document" /> that raised the event.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Document" /> that raised the event</value></member>
        <member name="P:Couchbase.Lite.Document.DocumentChangeEventArgs.Change">
            <summary>
            Gets the details of the change.
            </summary>
            <value>The details of the change.</value></member>
        <member name="T:Couchbase.Lite.Manager">
            <summary>
            The top-level object that manages Couchbase Lite <see cref="T:Couchbase.Lite.Database" />s.
            </summary></member>
        <member name="F:Couchbase.Lite.Manager.HttpErrorDomain">
            <summary>
            The error domain used for HTTP status codes.
            </summary></member>
        <member name="P:Couchbase.Lite.Manager.SharedInstance">
            <summary>
            Gets a shared, per-process, instance of <see cref="T:Couchbase.Lite.Manager" />.
            </summary>
            <value>The shared instance.</value></member>
        <member name="M:Couchbase.Lite.Manager.IsValidDatabaseName(System.String)">
            <summary>
            Determines if the given name is a valid <see cref="T:Couchbase.Lite.Database" /> name.
            Only the following characters are valid: abcdefghijklmnopqrstuvwxyz0123456789_$()+-/
            </summary>
            <returns><c>true</c> if the given name is a valid <see cref="T:Couchbase.Lite.Database" /> name, otherwise <c>false</c>.</returns>
            <param name="name">The Database name to validate.</param></member>
        <member name="M:Couchbase.Lite.Manager.#ctor">
            <summary>
            Initializes a Manager that stores Databases in the default directory.
            </summary></member>
        <member name="M:Couchbase.Lite.Manager.#ctor(System.IO.DirectoryInfo,Couchbase.Lite.ManagerOptions)">
            <summary>
            Initializes a Manager that stores Databases in the given directory.
            </summary>
            <param name="directoryFile"><see cref="T:System.IO.DirectoryInfo" /> object for initializing the Manager object.</param>
            <param name="options">Option flags for initialization.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when there is an error while accessing or creating the given directory.</exception></member>
        <member name="P:Couchbase.Lite.Manager.Directory">
            <summary>
            Gets the directory where the <see cref="T:Couchbase.Lite.Manager" /> stores <see cref="T:Couchbase.Lite.Database" />.
            </summary>
            <value>The directory.</value></member>
        <member name="P:Couchbase.Lite.Manager.AllDatabaseNames">
            <summary>
            Gets the names of all existing <see cref="T:Couchbase.Lite.Database" />s.
            </summary>
            <value>All database names.</value></member>
        <member name="M:Couchbase.Lite.Manager.Close">
            <summary>
            Releases all resources used by the <see cref="T:Couchbase.Lite.Manager" /> and closes all its <see cref="T:Couchbase.Lite.Database" />s.
            </summary></member>
        <member name="M:Couchbase.Lite.Manager.GetDatabase(System.String)">
            <summary>
            Returns the <see cref="T:Couchbase.Lite.Database" /> with the given name.  If the <see cref="T:Couchbase.Lite.Database" /> does not already exist, it is created.
            </summary>
            <returns>The database.</returns>
            <param name="name">Name.</param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown if an issue occurs while gettings or createing the <see cref="T:Couchbase.Lite.Database" />.</exception></member>
        <member name="M:Couchbase.Lite.Manager.GetExistingDatabase(System.String)">
            <summary>
            Returns the <see cref="T:Couchbase.Lite.Database" /> with the given name if it exists, otherwise null.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.Database" /> with the given name if it exists, otherwise null.</returns>
            <param name="name">The name of the Database to get.</param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown if an issue occurs while getting the <see cref="T:Couchbase.Lite.Database" />.</exception></member>
        <member name="M:Couchbase.Lite.Manager.ReplaceDatabase(System.String,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.IO.Stream})">
            <summary>Replaces or installs a database from a file.</summary>
            <remarks>
            Replaces or installs a database from a file.
            This is primarily used to install a canned database on first launch of an app, in which case
            you should first check .exists to avoid replacing the database if it exists already. The
            canned database would have been copied into your app at build time.
            </remarks>
            <param name="name">The name of the target Database to replace or create.</param>
            <param name="databaseStream">Stream on the source Database file.</param>
            <param name="attachmentStreams">
            Map of the associated source Attachments, or null if there are no attachments.
            The Map key is the name of the attachment, the map value is an InputStream for
            the attachment contents. If you wish to control the order that the attachments
            will be processed, use a LinkedHashMap, SortedMap or similar and the iteration order
            will be honoured.
            </param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.Manager.ReplaceDatabase(System.String,System.IO.Stream)-->
        <member name="T:Couchbase.Lite.IndexUpdateMode">
            <summary>
            Used to specify when a <see cref="T:Couchbase.Lite.View" /> index is updated
            when running a <see cref="T:Couchbase.Lite.Query" />.
            <list type="table">
            <listheader>
            <term>Name</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Before</term>
            <description>
            If needed, update the index before running the <see cref="T:Couchbase.Lite.Query" /> (default).
            This guarantees up-to-date results at the expense of a potential delay in receiving results.
            </description>
            </item>
            <item>
            <term>Never</term>
            <description>
            Never update the index when running a <see cref="T:Couchbase.Lite.Query" />.
            This guarantees receiving results the fastest at the expense of potentially out-of-date results.
            </description>
            </item>
            <item>
            <term>After</term>
            <description>
            If needed, update the index asynchronously after running the <see cref="T:Couchbase.Lite.Query" />.
            This guarantees receiving results the fastest, at the expense of potentially out-of-date results,
            and that subsequent Queries will return more accurate results.
            </description>
            </item>
            </list>
            </summary></member>
        <member name="F:Couchbase.Lite.IndexUpdateMode.Before">
            <summary>
            If needed, update the index before running the <see cref="T:Couchbase.Lite.Query" /> (default).
            This guarantees up-to-date results at the expense of a potential delay in receiving results.
            </summary></member>
        <member name="F:Couchbase.Lite.IndexUpdateMode.Never">
            <summary>
            Never update the index when running a <see cref="T:Couchbase.Lite.Query" />.
            This guarantees receiving results the fastest at the expense of potentially out-of-date results.
            </summary></member>
        <member name="F:Couchbase.Lite.IndexUpdateMode.After">
            <summary>
            If needed, update the index asynchronously after running the <see cref="T:Couchbase.Lite.Query" />.
            This guarantees receiving results the fastest, at the expense of potentially out-of-date results,
            and that subsequent Queries will return more accurate results.
            </summary></member>
        <member name="T:Couchbase.Lite.AllDocsMode">
            <summary>
            Options for specifying the mode that an all documents query should run in
            </summary></member>
        <member name="F:Couchbase.Lite.AllDocsMode.AllDocs">
            <summary>
            Regular mode
            </summary></member>
        <member name="F:Couchbase.Lite.AllDocsMode.IncludeDeleted">
            <summary>
            Include deleted documents in the results
            </summary></member>
        <member name="F:Couchbase.Lite.AllDocsMode.ShowConflicts">
            <summary>
            Include conflicted revisions in the results
            </summary></member>
        <member name="F:Couchbase.Lite.AllDocsMode.OnlyConflicts">
            <summary>
            Include *only* conflicted revisions in the results
            </summary></member>
        <member name="T:Couchbase.Lite.Query">
            <summary>
            A Couchbase Lite <see cref="T:Couchbase.Lite.View" /> <see cref="T:Couchbase.Lite.Query" />.
            </summary></member>
        <member name="M:Couchbase.Lite.Query.#ctor(Couchbase.Lite.Database,Couchbase.Lite.MapDelegate)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.Query.#ctor(Couchbase.Lite.Database,Couchbase.Lite.Query)">
            <summary>Constructor</summary></member>
        <member name="P:Couchbase.Lite.Query.Database">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> that owns
            the <see cref="T:Couchbase.Lite.Query" />'s <see cref="T:Couchbase.Lite.View" />.
            </summary>
            <value>
            The <see cref="T:Couchbase.Lite.Database" /> that owns
            the <see cref="T:Couchbase.Lite.Query" />'s <see cref="T:Couchbase.Lite.View" />.
            </value></member>
        <member name="P:Couchbase.Lite.Query.Limit">
            <summary>
            Gets or sets the maximum number of rows to return.
            The default value is 0, meaning 'unlimited'.
            </summary>
            <value>
            The maximum number of rows to return.
            The default value is 0, meaning 'unlimited'
            </value></member>
        <member name="P:Couchbase.Lite.Query.Skip">
            <summary>
            Gets or sets the number of initial rows to skip. Default value is 0.
            </summary>
            <value>
            The number of initial rows to skip. Default value is 0
            </value></member>
        <member name="P:Couchbase.Lite.Query.Descending">
            <summary>
            Gets or sets whether the rows be returned in descending key order.
            Default value is <c>false</c>.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Query.StartKey">
            <summary>
            Gets or sets the key of the first value to return.
            A null value has no effect.
            </summary>
            <value>The start key.</value></member>
        <member name="P:Couchbase.Lite.Query.EndKey">
            <summary>
            Gets or sets the key of the last value to return.
            A null value has no effect.
            </summary>
            <value>The end key.</value></member>
        <member name="P:Couchbase.Lite.Query.StartKeyDocId">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Lite.Document" /> id of the first value to return.
            A null value has no effect. This is useful if the view contains
            multiple identical keys, making startKey ambiguous.
            </summary>
            <value>The Document id of the first value to return.</value></member>
        <member name="P:Couchbase.Lite.Query.EndKeyDocId">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Lite.Document" /> id of the last value to return.
            A null value has no effect. This is useful if the view contains
            multiple identical keys, making endKey ambiguous.
            </summary>
            <value>The Document id of the last value to return.</value></member>
        <!--FIXME: Invalid documentation markup was found for member P:Couchbase.Lite.Query.InclusiveEnd-->
        <member name="P:Couchbase.Lite.Query.IndexUpdateMode">
            <summary>
            Gets or sets when a <see cref="T:Couchbase.Lite.View" /> index is updated when running a Query.
            </summary>
            <value>The index update mode.</value></member>
        <member name="P:Couchbase.Lite.Query.AllDocsMode">
            <summary>Changes the behavior of a query created by -queryAllDocuments.</summary>
            <remarks>
            Changes the behavior of a query created by -queryAllDocuments.
            - In mode kCBLAllDocs (the default), the query simply returns all non-deleted documents.
            - In mode kCBLIncludeDeleted, it also returns deleted documents.
            - In mode kCBLShowConflicts, the .conflictingRevisions property of each row will return the
            conflicting revisions, if any, of that document.
            - In mode kCBLOnlyConflicts, _only_ documents in conflict will be returned.
            (This mode is especially useful for use with a CBLLiveQuery, so you can be notified of
            conflicts as they happen, i.e. when they're pulled in by a replication.)
            </remarks></member>
        <member name="P:Couchbase.Lite.Query.Keys">
            <summary>
            Gets or sets the keys of the values to return.
            A null value has no effect.
            </summary>
            <value>The keys of the values to return.</value></member>
        <member name="P:Couchbase.Lite.Query.MapOnly">
            <summary>
            Gets or sets whether to only use the map function without using the reduce function.
            </summary>
            <value><c>true</c> if map only; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Query.GroupLevel">
            <summary>
            Gets or sets whether results will be grouped in <see cref="T:Couchbase.Lite.View" />s that have reduce functions.
            </summary>
            <value>The group level.</value></member>
        <member name="P:Couchbase.Lite.Query.Prefetch">
            <summary>
            Gets or sets whether to include the entire <see cref="T:Couchbase.Lite.Document" /> content with the results.
            The <see cref="T:Couchbase.Lite.Document" />s can be accessed via the <see cref="T:Couchbase.Lite.QueryRow" />'s
            documentProperties property.
            </summary>
            <value><c>true</c> if prefetch; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Query.IncludeDeleted">
            <summary>
            Gets or sets whether Queries created via the <see cref="T:Couchbase.Lite.Database" /> createAllDocumentsQuery method
            will include deleted <see cref="T:Couchbase.Lite.Document" />s.
            This property has no effect in other types of Queries.
            </summary>
            <value><c>true</c> if include deleted; otherwise, <c>false</c>.</value></member>
        <member name="E:Couchbase.Lite.Query.Completed">
            <summary>
            Event raised when a query has finished running.
            </summary></member>
        <member name="M:Couchbase.Lite.Query.Run">
            <summary>
            Runs the <see cref="T:Couchbase.Lite.Query" /> and returns an enumerator over the result rows.
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while executing the <see cref="T:Couchbase.Lite.Query" />.
            </exception></member>
        <member name="M:Couchbase.Lite.Query.RunAsync(System.Func{Couchbase.Lite.QueryEnumerator},System.Threading.CancellationToken)">
            <summary>
            Runs <see cref="T:Couchbase.Lite.Query" /> function asynchronously and
            will notified <see cref="E:Couchbase.Lite.Query.Completed" /> event handlers on completion.
            </summary>
            <returns>The async task.</returns>
            <param name="run">Query's Run function</param>
            <param name="token">CancellationToken token.</param></member>
        <member name="M:Couchbase.Lite.Query.RunAsync">
            <summary>
            Runs the Query asynchronously and
            will notified <see cref="E:Couchbase.Lite.Query.Completed" /> event handlers on completion.
            </summary>
            <returns>The async task.</returns></member>
        <member name="M:Couchbase.Lite.Query.ToLiveQuery">
            <summary>
            Returns a new LiveQuery with identical properties to the the Query.
            </summary>
            <returns>The live query.</returns></member>
        <member name="T:Couchbase.Lite.ReplicationStatus">
            <summary>
            Describes the status of a <see cref="T:Couchbase.Lite.Replication" />.
            <list type="table">
            <listheader>
            <term>Name</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Stopped</term>
            <description>
            The <see cref="T:Couchbase.Lite.Replication" /> is finished or hit a fatal error.
            </description>
            </item>
            <item>
            <term>Offline</term>
            <description>
            The remote host is currently unreachable.
            </description>
            </item>
            <item>
            <term>Idle</term>
            <description>
            The continuous <see cref="T:Couchbase.Lite.Replication" /> is caught up and
            waiting for more changes.
            </description>
            </item>
            <item>
            <term>Active</term>
            <description>
            The <see cref="T:Couchbase.Lite.Replication" /> is actively transferring data.
            </description>
            </item>
            </list>
            </summary></member>
        <member name="F:Couchbase.Lite.ReplicationStatus.Stopped">
            <summary>
            The <see cref="T:Couchbase.Lite.Replication" /> is finished or hit a fatal error.
            </summary></member>
        <member name="F:Couchbase.Lite.ReplicationStatus.Offline">
            <summary>
            The remote host is currently unreachable.
            </summary></member>
        <member name="F:Couchbase.Lite.ReplicationStatus.Idle">
            <summary>
            The continuous <see cref="T:Couchbase.Lite.Replication" /> is caught up and
            waiting for more changes.
            </summary></member>
        <member name="F:Couchbase.Lite.ReplicationStatus.Active">
            <summary>
            The <see cref="T:Couchbase.Lite.Replication" /> is actively transferring data.
            </summary></member>
        <member name="T:Couchbase.Lite.Replication">
            <summary>
            A Couchbase Lite pull or push <see cref="T:Couchbase.Lite.Replication" />
            between a local and a remote <see cref="T:Couchbase.Lite.Database" />.
            </summary></member>
        <member name="M:Couchbase.Lite.Replication.#ctor(Couchbase.Lite.Database,System.Uri,System.Boolean,Couchbase.Lite.Support.IHttpClientFactory,System.Threading.Tasks.TaskFactory)">
            <summary>Private Constructor</summary></member>
        <member name="M:Couchbase.Lite.Replication.MaybeCreateRemoteDB">
            <summary>CHECKPOINT STORAGE:</summary></member>
        <member name="M:Couchbase.Lite.Replication.RemoteCheckpointDocID">
            <summary>This is the _local document ID stored on the remote server to keep track of state.
            </summary>
            <remarks>
            This is the _local document ID stored on the remote server to keep track of state.
            Its ID is based on the local database ID (the private one, to make the result unguessable)
            and the remote database's URL.
            </remarks></member>
        <member name="M:Couchbase.Lite.Replication.Retry">
            <summary>
            Called after a continuous replication has gone idle, but it failed to transfer some revisions
            and so wants to try again in a minute.
            </summary>
            <remarks>
            Called after a continuous replication has gone idle, but it failed to transfer some revisions
            and so wants to try again in a minute. Should be overridden by subclasses.
            </remarks></member>
        <member name="P:Couchbase.Lite.Replication.LocalDatabase">
            <summary>
            Gets the local <see cref="T:Couchbase.Lite.Database" /> being replicated to/from.
            </summary>
            <value>The local <see cref="T:Couchbase.Lite.Database" /> being replicated to/from.</value></member>
        <member name="P:Couchbase.Lite.Replication.RemoteUrl">
            <summary>
            Gets the remote URL being replicated to/from.
            </summary>
            <value>The remote URL being replicated to/from.</value></member>
        <member name="P:Couchbase.Lite.Replication.IsPull">
            <summary>
            Gets whether the <see cref="T:Couchbase.Lite.Replication" /> pulls from,
            as opposed to pushes to, the target.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:Couchbase.Lite.Replication" />
            is pull; otherwise, <c>false</c>.
            </value></member>
        <member name="P:Couchbase.Lite.Replication.CreateTarget">
            <summary>
            Gets or sets whether the target <see cref="T:Couchbase.Lite.Database" /> should be created
            if it doesn't already exist. This only has an effect if the target supports it.
            </summary>
            <value><c>true</c> if the target <see cref="T:Couchbase.Lite.Database" /> should be created if
            it doesn't already exist; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Replication.Continuous">
            <summary>
            Gets or sets whether the <see cref="T:Couchbase.Lite.Replication" /> operates continuously,
            replicating changes as the source <see cref="T:Couchbase.Lite.Database" /> is modified.
            </summary>
            <value><c>true</c> if continuous; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Replication.Filter">
            <summary>
            Gets or sets the name of an optional filter function to run on the source
            <see cref="T:Couchbase.Lite.Database" />. Only documents for which the function
            returns true are replicated.
            </summary>
            <value>
            The name of an optional filter function to run on the source
            <see cref="T:Couchbase.Lite.Database" />.
            </value></member>
        <member name="P:Couchbase.Lite.Replication.FilterParams">
            <summary>
            Gets or sets the parameters to pass to the filter function.
            </summary>
            <value>The parameters to pass to the filter function.</value></member>
        <member name="P:Couchbase.Lite.Replication.Channels">
            <summary>
            Gets or sets the list of Sync Gateway channel names to filter by for pull <see cref="T:Couchbase.Lite.Replication" />.
            </summary>
            <remarks>
            Gets or sets the list of Sync Gateway channel names to filter by for pull <see cref="T:Couchbase.Lite.Replication" />.
            A null value means no filtering, and all available channels will be replicated.
            Only valid for pull replications whose source database is on a Couchbase Sync Gateway server.
            This is a convenience property that just sets the values of filter and filterParams.
            </remarks>
            <value>The list of Sync Gateway channel names to filter by for pull <see cref="T:Couchbase.Lite.Replication" />.</value></member>
        <member name="P:Couchbase.Lite.Replication.DocIds">
            <summary>
            Gets or sets the ids of the <see cref="T:Couchbase.Lite.Document" />s to replicate.
            </summary>
            <value>The ids of the <see cref="T:Couchbase.Lite.Document" />s to replicate.</value></member>
        <member name="P:Couchbase.Lite.Replication.Headers">
            <summary>
            Gets or sets the extra HTTP headers to send in <see cref="T:Couchbase.Lite.Replication" />
            requests to the remote <see cref="T:Couchbase.Lite.Database" />.
            </summary>
            <value>
            the extra HTTP headers to send in <see cref="T:Couchbase.Lite.Replication" /> requests
            to the remote <see cref="T:Couchbase.Lite.Database" />.
            </value></member>
        <member name="P:Couchbase.Lite.Replication.Status">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Replication" />'s current status.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Replication" />'s current status.</value></member>
        <member name="P:Couchbase.Lite.Replication.IsRunning">
            <summary>
            Gets whether the <see cref="T:Couchbase.Lite.Replication" /> is running.
            Continuous <see cref="T:Couchbase.Lite.Replication" />s never actually stop,
            instead they go idle waiting for new data to appear.
            </summary>
            <value>
            <c>true</c> if <see cref="T:Couchbase.Lite.Replication" /> is running; otherwise, <c>false</c>.
            </value></member>
        <member name="P:Couchbase.Lite.Replication.LastError">
            <summary>
            Gets the last error, if any, that occurred since the <see cref="T:Couchbase.Lite.Replication" /> was started.
            </summary></member>
        <member name="P:Couchbase.Lite.Replication.CompletedChangesCount">
            <summary>
            If the <see cref="T:Couchbase.Lite.Replication" /> is active, gets the number of completed changes that have been processed, otherwise 0.
            </summary>
            <value>The completed changes count.</value></member>
        <member name="P:Couchbase.Lite.Replication.ChangesCount">
            <summary>
            If the <see cref="T:Couchbase.Lite.Replication" /> is active, gets the number of changes to be processed, otherwise 0.
            </summary>
            <value>The changes count.</value></member>
        <member name="P:Couchbase.Lite.Replication.Authenticator">
            <summary>
            Gets or sets the authenticator.
            </summary>
            <value>The authenticator.</value></member>
        <member name="M:Couchbase.Lite.Replication.Start">
            <summary>
            Starts the <see cref="T:Couchbase.Lite.Replication" />.
            </summary></member>
        <member name="M:Couchbase.Lite.Replication.Stop">
            <summary>
            Stops the <see cref="T:Couchbase.Lite.Replication" />.
            </summary></member>
        <member name="M:Couchbase.Lite.Replication.Restart">
            <summary>
            Restarts the <see cref="T:Couchbase.Lite.Replication" />.
            </summary></member>
        <member name="M:Couchbase.Lite.Replication.SetCookie(System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Sets an HTTP cookie for the Replication.</summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
            <param name="path">The path attribute of the cookie.  If null or empty, will use remote.getPath()
            </param>
            <param name="expirationDate">The expiration date of the cookie.</param>
            <param name="secure">Whether the cookie should only be sent using a secure protocol (e.g. HTTPS).
            </param>
            <param name="httpOnly">(ignored) Whether the cookie should only be used when transmitting HTTP, or HTTPS, requests thus restricting access from other, non-HTTP APIs.
            </param></member>
        <member name="E:Couchbase.Lite.Replication.Changed">
            <summary>
            Adds or Removed a <see cref="T:Couchbase.Lite.Database" /> change delegate
            that will be called whenever the <see cref="T:Couchbase.Lite.Replication" />
            changes.
            </summary></member>
        <member name="T:Couchbase.Lite.ReplicationChangeEventArgs">
            <see cref="T:Couchbase.Lite.Replication" /> Change Event Arguments.</member>
        <member name="P:Couchbase.Lite.ReplicationChangeEventArgs.Source">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Replication" /> that raised the event.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Replication" /> that raised the event.</value></member>
        <member name="M:Couchbase.Lite.ReplicationChangeEventArgs.#ctor(Couchbase.Lite.Replication)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Lite.ReplicationChangeEventArgs" /> class.
            </summary>
            <param name="sender">The <see cref="T:Couchbase.Lite.Replication" /> that raised the event.</param></member>
        <member name="T:Couchbase.Lite.Revision">
            <summary>
            A Couchbase Lite Document Revision.
            </summary></member>
        <member name="M:Couchbase.Lite.Revision.#ctor(Couchbase.Lite.Document)">
            <summary>Constructor</summary></member>
        <member name="P:Couchbase.Lite.Revision.Document">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document" /> that this <see cref="T:Couchbase.Lite.Revision" /> belongs to.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Document" /> that this <see cref="T:Couchbase.Lite.Revision" /> belongs to</value></member>
        <member name="P:Couchbase.Lite.Revision.Database">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.Revision" />'s
            <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.Revision" />'s
            <see cref="T:Couchbase.Lite.Document" />.</value></member>
        <member name="P:Couchbase.Lite.Revision.Id">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Revision" />'s id.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Revision" />'s id.</value></member>
        <member name="P:Couchbase.Lite.Revision.IsDeletion">
            <summary>
            Gets if the <see cref="T:Couchbase.Lite.Revision" /> marks the deletion of its <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value><c>true</c> if the <see cref="T:Couchbase.Lite.Revision" /> marks the deletion; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.Revision.IsGone">
            <summary>
            Does this revision mark the deletion or removal (from available channels) of its document?
            (In other words, does it have a "_deleted_ or "_removed" property?)
            </summary></member>
        <member name="P:Couchbase.Lite.Revision.Properties">
            <summary>Gets the properties of the <see cref="T:Couchbase.Lite.Revision" />.</summary>
            <remarks>
            The contents of this revision of the document.
            Any keys in the dictionary that begin with "_", such as "_id" and "_rev", contain CouchbaseLite metadata.
            </remarks>
            <value>The properties of the <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.Revision.UserProperties">
            <summary>
            Gets the properties of the <see cref="T:Couchbase.Lite.Revision" />.
            without any properties with keys prefixed with '_' (which contain Couchbase Lite data).
            </summary>
            <value>The properties of the <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.Revision.Parent">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The parent <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.Revision.ParentId">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />'s id.
            </summary>
            <value>The parent <see cref="T:Couchbase.Lite.Revision" />'s id.</value></member>
        <member name="P:Couchbase.Lite.Revision.RevisionHistory">
            <summary>Returns the history of this document as an array of CBLRevisions, in forward order.</summary>
            <remarks>
            Returns the history of this document as an array of CBLRevisions, in forward order.
            Older revisions are NOT guaranteed to have their properties available.
            </remarks>
            <value>The history of this document as an array of CBLRevisions, in forward order</value></member>
        <member name="P:Couchbase.Lite.Revision.AttachmentNames">
            <summary>
            Gets the names of all the <see cref="T:Couchbase.Lite.Attachment" />s.
            </summary>
            <value>
            the names of all the <see cref="T:Couchbase.Lite.Attachment" />s.
            </value></member>
        <member name="P:Couchbase.Lite.Revision.Attachments">
            <summary>
            Gets all the <see cref="T:Couchbase.Lite.Attachment" />s.
            </summary>
            <value>All the <see cref="T:Couchbase.Lite.Attachment" />s.</value></member>
        <member name="M:Couchbase.Lite.Revision.GetProperty(System.String)">
            <summary>
            Returns the value of the property with the specified key.
            </summary>
            <returns>The value of the property with the specified key.</returns>
            <param name="key">The key of the property value to return.</param></member>
        <member name="M:Couchbase.Lite.Revision.GetAttachment(System.String)">
            <summary>
            Returns the <see cref="T:Couchbase.Lite.Attachment" /> with the specified name if it exists, otherwise null.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.Attachment" /> with the specified name if it exists, otherwise null.</returns>
            <param name="name">The name of the <see cref="T:Couchbase.Lite.Attachment" /> to return.</param></member>
        <member name="T:Couchbase.Lite.ViewCollation">
            <summary>
            Indicates the collation to use for sorted items in the view
            </summary></member>
        <member name="F:Couchbase.Lite.ViewCollation.Unicode">
            <summary>
            Sort via the unicode standard
            </summary></member>
        <member name="F:Couchbase.Lite.ViewCollation.Raw">
            <summary>
            Raw binary sort
            </summary></member>
        <member name="F:Couchbase.Lite.ViewCollation.ASCII">
            <summary>
            Sort via ASCII comparison
            </summary></member>
        <member name="T:Couchbase.Lite.View">
            <summary>
            A Couchbase Lite <see cref="T:Couchbase.Lite.View" />.
            A <see cref="T:Couchbase.Lite.View" /> defines a persistent index managed by map/reduce.
            </summary></member>
        <member name="P:Couchbase.Lite.View.Compiler">
            <summary>
            Gets or sets an object that can compile source code into map and reduce delegates.
            </summary>
            <value>The compiler object.</value></member>
        <member name="M:Couchbase.Lite.View.QueryWithOptions(Couchbase.Lite.QueryOptions)">
            <summary>Queries the view.</summary>
            <remarks>Queries the view. Does NOT first update the index.</remarks>
            <param name="options">The options to use.</param>
            <returns>An array of QueryRow objects.</returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.View.ReducedQuery(Couchbase.Lite.Cursor,System.Boolean,System.Int32)">
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.View.ToJSONString(System.Object)">
            <summary>Indexing</summary></member>
        <member name="P:Couchbase.Lite.View.Database">
            <summary>
            Get the <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.View" />.
            </summary>
            <value>
            The <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.View" />.
            </value></member>
        <member name="P:Couchbase.Lite.View.Name">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.View" />'s name.
            </summary>
            <value>the <see cref="T:Couchbase.Lite.View" />'s name.</value></member>
        <member name="P:Couchbase.Lite.View.Map">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.View" />'s <see cref="T:Couchbase.Lite.MapDelegate" />.
            </summary>
            <value>The map function.</value></member>
        <member name="P:Couchbase.Lite.View.Reduce">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.View" />'s <see cref="T:Couchbase.Lite.ReduceDelegate" />.
            </summary>
            <value>The reduce function.</value></member>
        <member name="P:Couchbase.Lite.View.IsStale">
            <summary>
            Gets if the <see cref="T:Couchbase.Lite.View" />'s indices are currently out of date.
            </summary>
            <value><c>true</c> if this instance is stale; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.View.LastSequenceIndexed">
            <summary>
            Gets the last sequence number indexed so far.
            </summary>
            <value>The last sequence number indexed.</value></member>
        <member name="M:Couchbase.Lite.View.SetMap(Couchbase.Lite.MapDelegate,System.String)">
            <summary>
            Defines the <see cref="T:Couchbase.Lite.View" />'s <see cref="T:Couchbase.Lite.MapDelegate" /> and sets
            its <see cref="T:Couchbase.Lite.ReduceDelegate" /> to null.
            </summary>
            <returns>
            True if the <see cref="T:Couchbase.Lite.MapDelegate" /> was set, otherwise false. If the values provided are
            identical to the values that are already set, then the values will not be updated and false will be returned.
            In addition, if true is returned, the index was deleted and will be rebuilt on the next
            <see cref="T:Couchbase.Lite.Query" /> execution.
            </returns>
            <param name="mapDelegate">The <see cref="T:Couchbase.Lite.MapDelegate" /> to set</param>
            <param name="version">
            The key of the property value to return. The value of this parameter must change when
            the <see cref="T:Couchbase.Lite.MapDelegate" /> is changed in a way that will cause it to
            produce different results.
            </param></member>
        <member name="M:Couchbase.Lite.View.SetMapReduce(Couchbase.Lite.MapDelegate,Couchbase.Lite.ReduceDelegate,System.String)">
            <summary>
            Defines the View's <see cref="T:Couchbase.Lite.MapDelegate" />
            and <see cref="T:Couchbase.Lite.ReduceDelegate" />.
            </summary>
            <remarks>
            Defines a view's functions.
            The view's definition is given as a class that conforms to the Mapper or
            Reducer interface (or null to delete the view). The body of the block
            should call the 'emit' object (passed in as a paramter) for every key/value pair
            it wants to write to the view.
            Since the function itself is obviously not stored in the database (only a unique
            string idenfitying it), you must re-define the view on every launch of the app!
            If the database needs to rebuild the view but the function hasn't been defined yet,
            it will fail and the view will be empty, causing weird problems later on.
            It is very important that this block be a law-abiding map function! As in other
            languages, it must be a "pure" function, with no side effects, that always emits
            the same values given the same input document. That means that it should not access
            or change any external state; be careful, since callbacks make that so easy that you
            might do it inadvertently!  The callback may be called on any thread, or on
            multiple threads simultaneously. This won't be a problem if the code is "pure" as
            described above, since it will as a consequence also be thread-safe.
            </remarks>
            <returns>
            <c>true</c> if the <see cref="T:Couchbase.Lite.MapDelegate" />
            and <see cref="T:Couchbase.Lite.ReduceDelegate" /> were set, otherwise <c>false</c>.
            If the values provided are identical to the values that are already set,
            then the values will not be updated and <c>false</c> will be returned.
            In addition, if <c>true</c> is returned, the index was deleted and
            will be rebuilt on the next <see cref="T:Couchbase.Lite.Query" /> execution.
            </returns>
            <param name="map">The <see cref="T:Couchbase.Lite.MapDelegate" /> to set.</param>
            <param name="reduce">The <see cref="T:Couchbase.Lite.ReduceDelegate" /> to set.</param>
            <param name="version">
            The key of the property value to return. The value of this parameter must change
            when the <see cref="T:Couchbase.Lite.MapDelegate" /> and/or <see cref="T:Couchbase.Lite.ReduceDelegate" />
            are changed in a way that will cause them to produce different results.
            </param></member>
        <member name="M:Couchbase.Lite.View.DeleteIndex">
            <summary>
            Deletes the <see cref="T:Couchbase.Lite.View" />'s persistent index.
            The index is regenerated on the next <see cref="T:Couchbase.Lite.Query" /> execution.
            </summary></member>
        <member name="M:Couchbase.Lite.View.Delete">
            <summary>
            Deletes the <see cref="T:Couchbase.Lite.View" />.
            </summary></member>
        <member name="M:Couchbase.Lite.View.CreateQuery">
            <summary>
            Creates a new <see cref="T:Couchbase.Lite.Query" /> for this view.
            </summary>
            <returns>A new <see cref="T:Couchbase.Lite.Query" /> for this view.</returns></member>
        <member name="T:Couchbase.Lite.IViewCompiler">
            <summary>
            An object that can be used to compile source code into map and reduce delegates.
            </summary></member>
        <member name="M:Couchbase.Lite.IViewCompiler.CompileMap(System.String,System.String)">
            <summary>
            Compiles source code into a <see cref="T:Couchbase.Lite.MapDelegate" />.
            </summary>
            <returns>A compiled <see cref="T:Couchbase.Lite.MapDelegate" />.</returns>
            <param name="source">The source code to compile into a <see cref="T:Couchbase.Lite.MapDelegate" />.</param>
            <param name="language">The language of the source.</param></member>
        <member name="M:Couchbase.Lite.IViewCompiler.CompileReduce(System.String,System.String)">
            <summary>
            Compiles source code into a <see cref="T:Couchbase.Lite.ReduceDelegate" />.
            </summary>
            <returns>A compiled <see cref="T:Couchbase.Lite.ReduceDelegate" />.</returns>
            <param name="source">The source code to compile into a <see cref="T:Couchbase.Lite.ReduceDelegate" />.</param>
            <param name="language">The language of the source.</param></member>
        <member name="T:Couchbase.Lite.MapDelegate">
            <summary>
            A delegate that is invoked when a <see cref="T:Couchbase.Lite.Document" />
            is being added to a <see cref="T:Couchbase.Lite.View" />.
            </summary>
            <param name="document">The <see cref="T:Couchbase.Lite.Document" /> being mapped.</param>
            <param name="emit">The delegate to use to add key/values to the <see cref="T:Couchbase.Lite.View" />.</param></member>
        <member name="T:Couchbase.Lite.EmitDelegate">
            <summary>
            A delegate that can be invoked to add key/values to a <see cref="T:Couchbase.Lite.View" />
            during a <see cref="T:Couchbase.Lite.MapDelegate" /> call.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param></member>
        <member name="T:Couchbase.Lite.ReduceDelegate">
            <summary>
            A delegate that can be invoked to summarize the results of a <see cref="T:Couchbase.Lite.View" />.
            </summary>
            <param name="keys">A list of keys to be reduced, or null if this is a rereduce.</param>
            <param name="values">A parallel array of values to be reduced, corresponding 1-to-1 with the keys.</param>
            <param name="reduce"><c>true</c> if the input values are the results of previous reductions, otherwise <c>false</c>.</param></member>
        <member name="M:Couchbase.Lite.Auth.PersonaAuthorizer.RegisterAssertion(System.String,System.String,System.String)">
            <summary>
            don't use this!! this was factored out for testing purposes, and had to be
            made public since tests are in their own package.
            </summary>
            <remarks>
            don't use this!! this was factored out for testing purposes, and had to be
            made public since tests are in their own package.
            </remarks></member>
        <member name="T:Couchbase.Lite.Body">
            <summary>
            A request/response/document body, stored as either JSON, IDictionary&gt;String,Object&gt;, or IList&gt;object&gt;
            </summary></member>
        <member name="M:Couchbase.Lite.Body.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Constructor
            </summary>
            <param name="json">An enumerable collection of bytes storing JSON</param></member>
        <member name="M:Couchbase.Lite.Body.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="properties">An IDictionary containing the properties and objects to serialize</param></member>
        <member name="M:Couchbase.Lite.Body.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="properties">An IDictionary containing a list of objects to serialize</param></member>
        <member name="M:Couchbase.Lite.Body.IsValidJSON">
            <summary>
            Determines whether this instance is valid JSON.
            </summary>
            <returns><c>true</c> if this instance is valid JSON; otherwise, <c>false</c>.</returns></member>
        <member name="M:Couchbase.Lite.Body.AsJson">
            <summary>
            Returns a serialized JSON byte enumerable object containing the properties
            of this object.
            </summary>
            <returns>JSON bytes</returns></member>
        <member name="M:Couchbase.Lite.Body.AsPrettyJson">
            <summary>
            Returns a serialized JSON byte enumerable object containing the properties
            of this object in human readable form.
            </summary>
            <returns>JSON bytes</returns></member>
        <member name="M:Couchbase.Lite.Body.AsJSONString">
            <summary>
            Returns a serialized JSON string containing the properties
            of this object
            </summary>
            <returns>JSON string</returns></member>
        <member name="M:Couchbase.Lite.Body.AsObject">
            <summary>
            Gets the deserialized object containing the properties of the JSON
            </summary>
            <returns>The deserialized object (either IDictionary or IList)</returns></member>
        <member name="M:Couchbase.Lite.Body.GetProperties">
            <summary>
            Gets the properties from this object
            </summary>
            <returns>The properties contained in the object</returns></member>
        <member name="M:Couchbase.Lite.Body.HasValueForKey(System.String)">
            <summary>
            Determines whether this instance has value the specified key.
            </summary>
            <returns><c>true</c> if this instance has value for the specified key; otherwise, <c>false</c>.</returns>
            <param name="key">The key to check</param></member>
        <member name="M:Couchbase.Lite.Body.GetPropertyForKey(System.String)">
            <summary>
            Gets the property for the given key
            </summary>
            <returns>The property for the given key</returns>
            <param name="key">Key.</param></member>
        <member name="T:Couchbase.Lite.DocumentChange">
            <summary>
            Provides details about a Document change.
            </summary></member>
        <member name="P:Couchbase.Lite.DocumentChange.DocumentId">
            <summary>
            Gets the Id of the <see cref="T:Couchbase.Lite.Document" /> that changed.
            </summary>
            <value>The Id of the <see cref="T:Couchbase.Lite.Document" /> that changed.</value></member>
        <member name="P:Couchbase.Lite.DocumentChange.RevisionId">
            <summary>
            Gets the Id of the new Revision.
            </summary>
            <value>The Id of the new Revision.</value></member>
        <member name="P:Couchbase.Lite.DocumentChange.IsCurrentRevision">
            <summary>
            Gets a value indicating whether this instance is current revision.
            </summary>
            <value><c>true</c> if this instance is current revision; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.DocumentChange.WinningRevision">
            <summary>
            Gets the winning revision.
            </summary>
            <value>The winning revision.</value></member>
        <member name="P:Couchbase.Lite.DocumentChange.IsConflict">
            <summary>
            Gets a value indicating whether this instance is conflict.
            </summary>
            <value><c>true</c> if this instance is conflict; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.DocumentChange.SourceUrl">
            <summary>
            Gets the remote URL of the source Database from which this change was replicated.
            </summary>
            <value>The remote URL of the source Database from which this change was replicated.</value></member>
        <member name="T:Couchbase.Lite.IValidationContext">
            <summary>
            Context passed to a <see cref="T:Couchbase.Lite.ValidateDelegate" />.
            </summary></member>
        <member name="P:Couchbase.Lite.IValidationContext.CurrentRevision">
            <summary>
            Gets the current <see cref="T:Couchbase.Lite.Revision" /> of the <see cref="T:Couchbase.Lite.Document" />,
            or null if this is a new <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The current revision.</value></member>
        <member name="P:Couchbase.Lite.IValidationContext.ChangedKeys">
            <summary>
            Gets the keys whose values have changed between the current and new <see cref="T:Couchbase.Lite.Revision" />s.
            </summary>
            <value>The changed keys.</value></member>
        <member name="M:Couchbase.Lite.IValidationContext.Reject">
            <summary>
            Rejects the new <see cref="T:Couchbase.Lite.Revision" />.
            </summary></member>
        <member name="M:Couchbase.Lite.IValidationContext.Reject(System.String)">
            <summary>
            Rejects the new <see cref="T:Couchbase.Lite.Revision" />. The specified message will be included with
            the resulting error.
            </summary>
            <param name="message">The message to include with the resulting error.</param></member>
        <member name="M:Couchbase.Lite.IValidationContext.ValidateChanges(Couchbase.Lite.ValidateChangeDelegate)">
            <summary>
            Calls the ValidateChangeDelegate for each key/value that has changed, passing both the old and new values.
            If any delegate call returns false, the enumeration stops and false is returned, otherwise true is returned.
            </summary>
            <returns><c>false</c> if any call to the ValidateChangeDelegate, otherwise <c>true</c>.</returns>
            <param name="changeValidator">The delegate to use to validate each change.</param></member>
        <member name="M:Couchbase.Lite.StreamExtensions.Reset(System.IO.Stream)">
            <summary>
            Readies a stream to be read from the beginning.
            </summary>
            <remarks>
            Implements the same semantics as Java's Stream.Reset().
            </remarks>
            <param name="stream">Stream.</param></member>
        <member name="T:Couchbase.Lite.ManagerOptions">
            <summary>
            Option flags for Manager initialization.
            </summary></member>
        <member name="P:Couchbase.Lite.ManagerOptions.MaxRetries">
            <summary>
            The maximum number of times to retry
            network requests that failed due to
            transient network errors.
            </summary>
            <value>The max retries.</value></member>
        <member name="P:Couchbase.Lite.ManagerOptions.Default">
            <summary>
            Gets the default option flags.
            </summary>
            <value>The default option flags.</value></member>
        <member name="M:Couchbase.Lite.ManagerOptions.#ctor">
            <summary>
            Provides configuration settings.
            </summary></member>
        <member name="P:Couchbase.Lite.ManagerOptions.ReadOnly">
            <summary>Gets or sets, whether changes to the database are disallowed.</summary></member>
        <member name="P:Couchbase.Lite.ManagerOptions.CallbackScheduler">
            <summary>
            Gets or sets the callback synchronization context.
            </summary>
            <value>The callback context.</value></member>
        <member name="P:Couchbase.Lite.ManagerOptions.RequestTimeout">
            <summary>
            Gets or sets the default network request timeout.
            </summary>
            <value>The request timeout. Defaults to 30 seconds.</value></member>
        <member name="P:Couchbase.Lite.ManagerOptions.MaxOpenHttpConnections">
            <summary>
            Gets or sets max number of open Http Connections
            </summary>
            <value>Max number of connections</value></member>
        <member name="P:Couchbase.Lite.ManagerOptions.MaxRevsToGetInBulk">
            <summary>
            Get or sets the max revs to get in a bulk download
            </summary>
            <value>Max revs to get in bulk download</value></member>
        <member name="T:Couchbase.Lite.LiveQuery">
            <summary>
            A Couchbase Lite <see cref="T:Couchbase.Lite.View" /> <see cref="T:Couchbase.Lite.Query" /> that
            automatically refreshes every time the <see cref="T:Couchbase.Lite.Database" /> changes
            in a way that would affect the results.
            </summary></member>
        <member name="P:Couchbase.Lite.LiveQuery.UpdateQueryTask">
            <summary>
            If a query is running and the user calls Stop() on this query, the Task
            will be used in order to cancel the query in progress.
            </summary></member>
        <member name="M:Couchbase.Lite.LiveQuery.Run">
            <summary>Sends the query to the server and returns an enumerator over the result rows (Synchronous).
            </summary>
            <remarks>
            Sends the query to the server and returns an enumerator over the result rows (Synchronous).
            Note: In a CBLLiveQuery you should add a ChangeListener and call start() instead.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="M:Couchbase.Lite.LiveQuery.Update">
            <summary>
            Implements the updating of the <see cref="P:Couchbase.Lite.LiveQuery.Rows" /> collection.
            </summary></member>
        <member name="P:Couchbase.Lite.LiveQuery.Rows">
            <summary>
            Gets the results of the <see cref="T:Couchbase.Lite.Query" />.
            The value will be null until the initial <see cref="T:Couchbase.Lite.Query" /> completes.
            </summary>
            <value>The row results of the <see cref="T:Couchbase.Lite.Query" />.</value></member>
        <member name="P:Couchbase.Lite.LiveQuery.LastError">
            <summary>
            Returns the last error, if any, that occured while executing
            the <see cref="T:Couchbase.Lite.Query" />, otherwise null.
            </summary>
            <value>The last error.</value></member>
        <member name="M:Couchbase.Lite.LiveQuery.Start">
            <summary>Starts observing database changes.</summary>
            <remarks>
            Starts the <see cref="T:Couchbase.Lite.LiveQuery" /> and begins observing <see cref="T:Couchbase.Lite.Database" />
            changes. When the <see cref="T:Couchbase.Lite.Database" /> changes in a way that would affect the results of
            the <see cref="T:Couchbase.Lite.Query" />, the <see cref="P:Couchbase.Lite.LiveQuery.Rows" /> property will be updated and any
            <see cref="E:Couchbase.Lite.LiveQuery.Changed" /> delegates will be notified.  Accessing the <see cref="P:Couchbase.Lite.LiveQuery.Rows" />  property or adding a
            <see cref="E:Couchbase.Lite.LiveQuery.Changed" /> delegate will automatically start the <see cref="T:Couchbase.Lite.LiveQuery" />.
            </remarks></member>
        <member name="M:Couchbase.Lite.LiveQuery.Stop">
            <summary>
            Stops the <see cref="T:Couchbase.Lite.LiveQuery" /> and stops observing Database changes.
            </summary></member>
        <member name="M:Couchbase.Lite.LiveQuery.WaitForRows">
            <summary>
            Blocks until the intial <see cref="T:Couchbase.Lite.Query" /> completes.
            </summary>
            <remarks>
            If an error occurs while executing the <see cref="T:Couchbase.Lite.Query" />, <see cref="P:Couchbase.Lite.LiveQuery.LastError" />
            will contain the exception. Can be cancelled if results are not returned after <see cref="F:Couchbase.Lite.LiveQuery.DefaultQueryTimeout" /> (90 seconds).
            </remarks></member>
        <member name="E:Couchbase.Lite.LiveQuery.Changed">
            <summary>
            Adds or removed a <see cref="T:Couchbase.Lite.LiveQuery" /> change delegate that will be called
            whenever the Database changes in a way that would affect the results of the
            <see cref="T:Couchbase.Lite.Query" />.
            </summary></member>
        <member name="T:Couchbase.Lite.QueryChangeEventArgs">
            <summary>
            Query change event arguments.
            </summary></member>
        <member name="P:Couchbase.Lite.QueryChangeEventArgs.Source">
            <summary>
            Gets the LiveQuery that raised the event.
            </summary>
            <value>The LiveQuery that raised the event.</value></member>
        <member name="P:Couchbase.Lite.QueryChangeEventArgs.Rows">
            <summary>
            Gets the results of the Query.
            </summary>
            <value>The results of the Query.</value></member>
        <member name="P:Couchbase.Lite.QueryChangeEventArgs.Error">
            <summary>
            Returns the error, if any, that occured while executing
            the <see cref="T:Couchbase.Lite.Query" />, otherwise null.
            </summary>
            <value>The error.</value></member>
        <member name="T:Couchbase.Lite.QueryCompletedEventArgs">
            <summary>
            Query completed event arguments.
            </summary></member>
        <member name="P:Couchbase.Lite.QueryCompletedEventArgs.Rows">
            <summary>
            The result rows from the Query.
            </summary>
            <value>he result rows.</value></member>
        <member name="P:Couchbase.Lite.QueryCompletedEventArgs.ErrorInfo">
            <summary>
            The error, if any, that occured during the execution of the Query
            </summary>
            <value>The error info if any.</value></member>
        <member name="M:Couchbase.Lite.QueryCompletedEventArgs.#ctor(Couchbase.Lite.QueryEnumerator,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Lite.QueryCompletedEventArgs" /> class.
            </summary>
            <param name="rows">Rows.</param>
            <param name="errorInfo">Error info.</param></member>
        <member name="T:Couchbase.Lite.QueryEnumerator">
            <summary>
            An enumerator for Couchbase Lite <see cref="T:Couchbase.Lite.View" /> <see cref="T:Couchbase.Lite.Query" /> results.
            </summary></member>
        <member name="P:Couchbase.Lite.QueryEnumerator.Count">
            <summary>
            Gets the number of rows in the <see cref="T:Couchbase.Lite.QueryEnumerator" />.
            </summary>
            <value>The number of rows in the <see cref="T:Couchbase.Lite.QueryEnumerator" />.</value></member>
        <member name="P:Couchbase.Lite.QueryEnumerator.SequenceNumber">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" />'s sequence number at the time the View results were generated.
            </summary>
            <value>The sequence number.</value></member>
        <member name="P:Couchbase.Lite.QueryEnumerator.Stale">
            <summary>
            Gets whether the <see cref="T:Couchbase.Lite.Database" /> has changed since
            the <see cref="T:Couchbase.Lite.View" /> results were generated.
            </summary>
            <value><c>true</c> if stale; otherwise, <c>false</c>.</value></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.GetRow(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.QueryRow" /> at the specified index in the results.
            </summary>
            <returns>The <see cref="T:Couchbase.Lite.QueryRow" /> at the specified index in the results.</returns>
            <param name="index">Index.</param></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.Reset">
            <Docs>The collection was modified after the enumerator was instantiated.</Docs>
            <attribution license="cc4" from="Microsoft" modified="false"></attribution>
            <see cref="M:System.Collections.IEnumerator.MoveNext"></see>
            <see cref="M:System.Collections.IEnumerator.Reset"></see>
            <see cref="T:System.InvalidOperationException"></see>
            <summary>
            Resets the <see cref="T:Couchbase.Lite.QueryEnumerator" />'s cursor position
            so that the next call to next() will return the first row.
            </summary></member>
        <member name="P:Couchbase.Lite.QueryEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Couchbase.Lite.QueryRow" /> from the results.
            </summary>
            <value>The current QueryRow.</value></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.MoveNext">
            <summary>
            Gets the next <see cref="T:Couchbase.Lite.QueryRow" /> from the results.
            </summary>
            <returns><c>true</c>, if next was moved, <c>false</c> otherwise.</returns></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Couchbase.Lite.QueryEnumerator" /> object.
            </summary>
            <remarks>Call <see cref="M:Couchbase.Lite.QueryEnumerator.Dispose" /> when you are finished using the <see cref="T:Couchbase.Lite.QueryEnumerator" />. The
            <see cref="M:Couchbase.Lite.QueryEnumerator.Dispose" /> method leaves the <see cref="T:Couchbase.Lite.QueryEnumerator" /> in an unusable state.
            After calling <see cref="M:Couchbase.Lite.QueryEnumerator.Dispose" />, you must release all references to the
            <see cref="T:Couchbase.Lite.QueryEnumerator" /> so the garbage collector can reclaim the memory that the
            <see cref="T:Couchbase.Lite.QueryEnumerator" /> was occupying.</remarks></member>
        <member name="P:Couchbase.Lite.QueryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.QueryRow" /> from the results.
            </summary>
            <value>The current QueryRow.</value></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns></member>
        <member name="M:Couchbase.Lite.QueryEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns></member>
        <member name="T:Couchbase.Lite.QueryOptions">
            <summary>Standard query options for views.</summary></member>
        <member name="T:Couchbase.Lite.QueryRow">
            <summary>
            A result row for a Couchbase Lite <see cref="T:Couchbase.Lite.View" /> <see cref="T:Couchbase.Lite.Query" />.
            </summary></member>
        <member name="P:Couchbase.Lite.QueryRow.Database">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.QueryRow" />'s <see cref="T:Couchbase.Lite.View" />.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Database" /> that owns the <see cref="T:Couchbase.Lite.QueryRow" />'s <see cref="T:Couchbase.Lite.View" />.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.Document">
            <summary>
            Gets the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.Document" /> associated with the <see cref="T:Couchbase.Lite.QueryRow" />'s <see cref="T:Couchbase.Lite.View" />.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.Key">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.QueryRow" />'s key.
            </summary>
            <value>The <see cref="T:Couchbase.Lite.QueryRow" />'s key.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.Value">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.QueryRow" />'s value.
            </summary>
            <value>Rhe <see cref="T:Couchbase.Lite.QueryRow" />'s value.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.DocumentId">
            <summary>
            Gets the Id of the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The Id of the associated <see cref="T:Couchbase.Lite.Document" />.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.SourceDocumentId">
            <summary>
            Gets the Id of the <see cref="T:Couchbase.Lite.Document" /> that caused the
            <see cref="T:Couchbase.Lite.QueryRow" /> to be emitted into the View.
            This will be the same as the documentId property, unless the map function
            caused a related <see cref="T:Couchbase.Lite.Document" /> to be linked by adding
            an '_id' key to the emmitted value. In this case, documentId will refer to
            the linked <see cref="T:Couchbase.Lite.Document" />, while sourceDocumentId always
            refers to the original <see cref="T:Couchbase.Lite.Document" />. In a reduced or grouped
            <see cref="T:Couchbase.Lite.Query" />, sourceDocumentId will be null because the rows
            don't correspond to individual <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The source document identifier.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.DocumentRevisionId">
            <summary>
            Gets the Id of the associated <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The Id of the associated <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.DocumentProperties">
            <summary>
            Gets the properties of the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>The properties of the associated <see cref="T:Couchbase.Lite.Document" />.</value></member>
        <member name="P:Couchbase.Lite.QueryRow.SequenceNumber">
            <summary>
            Gets the sequence number of the associated <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The sequence number.</value></member>
        <member name="M:Couchbase.Lite.QueryRow.GetConflictingRevisions">
            <summary>
            Gets the conflicting <see cref="T:Couchbase.Lite.Revision" />s of the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <remarks>
            Gets the conflicting <see cref="T:Couchbase.Lite.Revision" />s of the associated <see cref="T:Couchbase.Lite.Document" />.
            The first <see cref="T:Couchbase.Lite.Revision" /> in the array will be the default 'winning' <see cref="T:Couchbase.Lite.Revision" />
            that shadows the <see cref="T:Couchbase.Lite.Revision" />s. This is only valid in an all-documents <see cref="T:Couchbase.Lite.Query" />
            whose allDocsMode is set to ShowConflicts or OnlyConflicts, otherwise it returns null.
            </remarks>
            <returns>The conflicting <see cref="T:Couchbase.Lite.Revision" />s of the associated <see cref="T:Couchbase.Lite.Document" /></returns></member>
        <member name="M:Couchbase.Lite.QueryRow.Equals(System.Object)">
            <summary>
            This is used implicitly by -[LiveQuery update] to decide whether the query result has changed
            enough to notify the client.
            </summary>
            <remarks>
            This is used implicitly by -[LiveQuery update] to decide whether the query result has changed
            enough to notify the client. So it's important that it not give false positives, else the app
            won't get notified of changes.
            </remarks></member>
        <member name="T:Couchbase.Lite.Support.Batcher`1">
            <summary>
            Utility that queues up objects until the queue fills up or a time interval elapses,
            then passes all the objects at once to a client-supplied processor block.
            </summary>
            <remarks>
            Utility that queues up objects until the queue fills up or a time interval elapses,
            then passes all the objects at once to a client-supplied processor block.
            </remarks></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.#ctor(System.Threading.Tasks.TaskFactory,System.Int32,System.Int32,System.Action{System.Collections.Generic.IList{`0}},System.Threading.CancellationTokenSource)">
            <summary>Initializes a batcher.</summary>
            <remarks>Initializes a batcher.</remarks>
            <param name="workExecutor">the work executor that performs actual work</param>
            <param name="capacity">The maximum number of objects to batch up. If the queue reaches this size, the queued objects will be sent to the processor immediately.
            </param>
            <param name="delay">The maximum waiting time to collect objects before processing them. In some circumstances objects will be processed sooner.
            </param>
            <param name="processor">The callback/block that will be called to process the objects.
            </param></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.QueueObject(`0)">
            <summary>Adds an object to the queue.</summary></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.Flush">
            <summary>Sends queued objects to the processor block (up to the capacity).</summary></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.FlushAll">
            <summary>Sends _all_ the queued objects at once to the processor block.</summary></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.Count">
            <summary>Number of items to be processed.</summary></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.Clear">
            <summary>Empties the queue without processing any of the objects in it.</summary></member>
        <member name="M:Couchbase.Lite.Support.Batcher`1.DelayToUse">
            <summary>
            Calculates the delay to use when scheduling the next batch of objects to process.
            </summary>
            <remarks>
            There is a balance required between clearing down the input queue as fast as possible
            and not exhausting downstream system resources such as sockets and http response buffers
            by processing too many batches concurrently.
            </remarks>
            <returns>The to use.</returns></member>
        <member name="T:Couchbase.Lite.Replicator.ChangeTracker">
            <summary>
            Reads the continuous-mode _changes feed of a database, and sends the
            individual change entries to its client's changeTrackerReceivedChange()
            </summary></member>
        <member name="P:Couchbase.Lite.Replicator.ChangeTracker.Authenticator">
            <summary>Set Authenticator for BASIC Authentication</summary></member>
        <member name="M:Couchbase.Lite.Support.CouchbaseLiteHttpClientFactory.BuildHandlerPipeline">
            <summary>
            Build a pipeline of HttpMessageHandlers.
            </summary></member>
        <member name="T:Couchbase.Lite.Support.KMPMatch">
            <summary>Knuth-Morris-Pratt Algorithm for Pattern Matching</summary></member>
        <member name="M:Couchbase.Lite.Support.KMPMatch.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>Finds the first occurrence of the pattern in the text.</summary>
            <remarks>Finds the first occurrence of the pattern in the text.</remarks></member>
        <member name="M:Couchbase.Lite.Support.KMPMatch.ComputeFailure(System.Byte[])">
            <summary>
            Computes the failure function using a boot-strapping process,
            where the pattern is matched against itself.
            </summary>
            <remarks>
            Computes the failure function using a boot-strapping process,
            where the pattern is matched against itself.
            </remarks></member>
        <member name="T:Couchbase.Lite.Replicator.PulledRevision">
            <summary>A revision received from a remote server during a pull.</summary>
            <remarks>A revision received from a remote server during a pull. Tracks the opaque remote sequence ID.
            </remarks></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.#ctor(Couchbase.Lite.Database,System.Uri,System.Boolean,System.Threading.Tasks.TaskFactory)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.#ctor(Couchbase.Lite.Database,System.Uri,System.Boolean,Couchbase.Lite.Support.IHttpClientFactory,System.Threading.Tasks.TaskFactory)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.ProcessInbox(Couchbase.Lite.RevisionList)">
            <summary>Process a bunch of remote revisions from the _changes feed at once</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.QueueRemoteRevision(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Add a revision to the appropriate queue of revs to individually GET</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.PullRemoteRevisions">
            <summary>
            Start up some HTTP GETs, within our limit on the maximum simultaneous number
            The entire method is not synchronized, only the portion pulling work off the list
            Important to not hold the synchronized block while we do network access
            </summary></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.PullRemoteRevision(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Fetches the contents of a revision from the remote db, including its parent revision ID.
            </summary>
            <remarks>
            Fetches the contents of a revision from the remote db, including its parent revision ID.
            The contents are stored into rev.properties.
            </remarks></member>
        <member name="M:Couchbase.Lite.Replicator.Puller.InsertDownloads(System.Collections.Generic.IList{Couchbase.Lite.Internal.RevisionInternal})">
            <summary>This will be called when _revsToInsert fills up:</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Pusher.#ctor(Couchbase.Lite.Database,System.Uri,System.Boolean,System.Threading.Tasks.TaskFactory)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Pusher.#ctor(Couchbase.Lite.Database,System.Uri,System.Boolean,Couchbase.Lite.Support.IHttpClientFactory,System.Threading.Tasks.TaskFactory)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.Replicator.Pusher.UploadJsonRevision(Couchbase.Lite.Internal.RevisionInternal)">
            <summary>
            Uploads the revision as JSON instead of multipart.
            </summary>
            <remarks>
            Fallback to upload a revision if UploadMultipartRevision failed due to the server's rejecting
            multipart format.
            </remarks>
            <param name="rev">Rev.</param></member>
        <member name="M:Couchbase.Lite.Replicator.Pusher.FindCommonAncestor(Couchbase.Lite.Internal.RevisionInternal,System.Collections.Generic.IList{System.String})">
            <summary>
            Finds the common ancestor.
            </summary>
            <remarks>
            Given a revision and an array of revIDs, finds the latest common ancestor revID
            and returns its generation #. If there is none, returns 0.
            </remarks>
            <returns>The common ancestor.</returns>
            <param name="rev">Rev.</param>
            <param name="possibleRevIDs">Possible rev I ds.</param></member>
        <member name="T:Couchbase.Lite.ChangesOptions">
            <summary>Options for _changes feed</summary></member>
        <member name="T:Couchbase.Lite.Internal.RevisionInternal">
            <summary>Stores information about a revision -- its docID, revID, and whether it's deleted.
            </summary>
            <remarks>
            Stores information about a revision -- its docID, revID, and whether it's deleted.
            It can also store the sequence number and document contents (they can be added after creation).
            </remarks></member>
        <member name="M:Couchbase.Lite.Internal.RevisionInternal.GetGeneration">
            <summary>Generation number: 1 for a new document, 2 for the 2nd revision, ...</summary>
            <remarks>
            Generation number: 1 for a new document, 2 for the 2nd revision, ...
            Extracted from the numeric prefix of the revID.
            </remarks></member>
        <member name="T:Couchbase.Lite.RevisionList">
            <summary>An ordered list of TDRevisions</summary></member>
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.RevisionList.#ctor(System.Collections.Generic.IList{Couchbase.Lite.Internal.RevisionInternal})-->
        <member name="T:Couchbase.Lite.SavedRevision">
            <summary>
            A saved Couchbase Lite <see cref="T:Couchbase.Lite.Document" /> <see cref="T:Couchbase.Lite.Revision" />.
            </summary></member>
        <member name="M:Couchbase.Lite.SavedRevision.#ctor(Couchbase.Lite.Document,Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Constructor</summary></member>
        <member name="M:Couchbase.Lite.SavedRevision.#ctor(Couchbase.Lite.Database,Couchbase.Lite.Internal.RevisionInternal)">
            <summary>Constructor</summary></member>
        <member name="P:Couchbase.Lite.SavedRevision.Parent">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The parent.</value></member>
        <member name="P:Couchbase.Lite.SavedRevision.ParentId">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />'s Id.
            </summary>
            <value>The parent.</value></member>
        <member name="P:Couchbase.Lite.SavedRevision.RevisionHistory">
            <summary>Returns the history of this document as an array of <see cref="T:Couchbase.Lite.Revision" />s, in forward order.</summary>
            <remarks>
            Returns the history of this document as an array of <see cref="T:Couchbase.Lite.Revision" />s, in forward order.
            Older, ancestor, revisions are not guaranteed to have their properties available.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="P:Couchbase.Lite.SavedRevision.Id">
            <summary>Gets the Revision's id.</summary></member>
        <member name="P:Couchbase.Lite.SavedRevision.IsDeletion">
            <summary>
            Sets if the <see cref="T:Couchbase.Lite.Revision" /> marks the deletion of its <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <remarks>
            Does this revision mark the deletion of its document?
            (In other words, does it have a "_deleted" property?)
            </remarks>
            <value><c>true</c> if this instance is deletion; otherwise, <c>false</c>.</value></member>
        <member name="P:Couchbase.Lite.SavedRevision.Properties">
            <summary>The contents of this revision of the document.</summary>
            <remarks>
            The contents of this revision of the document.
            Any keys in the dictionary that begin with "_", such as "_id" and "_rev", contain CouchbaseLite metadata.
            </remarks>
            <returns>contents of this revision of the document.</returns></member>
        <member name="P:Couchbase.Lite.SavedRevision.PropertiesAvailable">
            <summary>
            Gets whether the <see cref="T:Couchbase.Lite.Revision" />'s properties are available.
            Older, ancestor, <see cref="T:Couchbase.Lite.Revision" />s are not guaranteed to have their properties available.
            </summary>
            <value><c>true</c> if properties available; otherwise, <c>false</c>.</value></member>
        <member name="M:Couchbase.Lite.SavedRevision.CreateRevision">
            <summary>
            Creates a new <see cref="T:Couchbase.Lite.UnsavedRevision" /> whose properties and attachments are initially identical to this one.
            </summary>
            <remarks>
            Creates a new mutable child revision whose properties and attachments are initially identical
            to this one's, which you can modify and then save.
            </remarks>
            <returns>
            A new child <see cref="T:Couchbase.Lite.UnsavedRevision" /> whose properties and attachments
            are initially identical to this one.
            </returns></member>
        <member name="M:Couchbase.Lite.SavedRevision.CreateRevision(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates and saves a new <see cref="T:Couchbase.Lite.Revision" /> with the specified properties.
            To succeed the specified properties must include a '_rev' property whose value maches the current Revision's id.
            </summary>
            <returns>
            The new <see cref="T:Couchbase.Lite.SavedRevision" />.
            </returns>
            <param name="properties">
            The properties to set on the new Revision.
            </param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an error occurs while creating or saving the new <see cref="T:Couchbase.Lite.Revision" />.
            </exception></member>
        <member name="M:Couchbase.Lite.SavedRevision.DeleteDocument">
            <summary>
            Creates and saves a new deletion <see cref="T:Couchbase.Lite.Revision" />
            for the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <returns>
            A new deletion Revision for the associated <see cref="T:Couchbase.Lite.Document" />
            </returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Throws if an issue occurs while creating a new deletion <see cref="T:Couchbase.Lite.Revision" />.
            </exception></member>
        <member name="T:Couchbase.Lite.UnsavedRevision">
            <summary>
            An unsaved Couchbase Lite Document Revision.
            </summary></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.AddAttachment(Couchbase.Lite.Attachment,System.String)">
            <summary>Creates or updates an attachment.</summary>
            <remarks>
            Creates or updates an attachment.
            The attachment data will be written to the database when the revision is saved.
            </remarks>
            <param name="attachment">A newly-created Attachment (not yet associated with any revision)</param>
            <param name="name">The attachment name.</param></member>
        <member name="P:Couchbase.Lite.UnsavedRevision.IsDeletion">
            <summary>
            Gets or sets if the <see cref="T:Couchbase.Lite.Revision" /> marks the deletion of its <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <value>
            <c>true</c> if tthe <see cref="T:Couchbase.Lite.Revision" /> marks the deletion of its <see cref="T:Couchbase.Lite.Document" />;
            otherwise, <c>false</c>.
            </value></member>
        <member name="P:Couchbase.Lite.UnsavedRevision.Parent">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <value>The parent.</value></member>
        <member name="P:Couchbase.Lite.UnsavedRevision.ParentId">
            <summary>
            Gets the parent <see cref="T:Couchbase.Lite.Revision" />'s Id.
            </summary>
            <value>The parent.</value></member>
        <member name="P:Couchbase.Lite.UnsavedRevision.RevisionHistory">
            <summary>Returns the history of this document as an array of <see cref="T:Couchbase.Lite.Revision" />s, in forward order.</summary>
            <remarks>
            Returns the history of this document as an array of <see cref="T:Couchbase.Lite.Revision" />s, in forward order.
            Older, ancestor, revisions are not guaranteed to have their properties available.
            </remarks>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException"></exception></member>
        <member name="P:Couchbase.Lite.UnsavedRevision.Id">
            <summary>Gets the Revision's id.</summary></member>
        <!--FIXME: Invalid documentation markup was found for member P:Couchbase.Lite.UnsavedRevision.Properties-->
        <member name="M:Couchbase.Lite.UnsavedRevision.SetUserProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets or sets the userProperties of the <see cref="T:Couchbase.Lite.Revision" />.
            </summary>
            <remarks>
            Gets or sets the userProperties of the <see cref="T:Couchbase.Lite.Revision" />.
            Get, returns the properties of the <see cref="T:Couchbase.Lite.Revision" />
            without any properties with keys prefixed with '_' (which contain Couchbase Lite data).
            Set, replaces all properties except for those with keys prefixed with '_'.
            </remarks>
            <value>The userProperties of the <see cref="T:Couchbase.Lite.Revision" />.</value></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.Save">
            <summary>
            Saves the <see cref="T:Couchbase.Lite.UnsavedRevision" />.
            This will fail if its parent is not the current <see cref="T:Couchbase.Lite.Revision" />
            of the associated <see cref="T:Couchbase.Lite.Document" />.
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while saving the <see cref="T:Couchbase.Lite.UnsavedRevision" />.
            </exception></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.Save(System.Boolean)">
            <summary>
            Saves the <see cref="T:Couchbase.Lite.UnsavedRevision" />, optionally allowing
            the save when there is a conflict.
            </summary>
            <param name="allowConflict">
            Whether or not to allow saving when there is a conflict.
            </param>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">
            Thrown if an issue occurs while saving the <see cref="T:Couchbase.Lite.UnsavedRevision" />.
            </exception></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.SetAttachment(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the attachment with the given name.
            </summary>
            <remarks>
            Sets the <see cref="T:Couchbase.Lite.Attachment" /> with the given name.
            The <see cref="T:Couchbase.Lite.Attachment" /> data will be written to
            the <see cref="T:Couchbase.Lite.Database" /> when the
            <see cref="T:Couchbase.Lite.Revision" /> is saved.
            </remarks>
            <param name="name">The name of the <see cref="T:Couchbase.Lite.Attachment" /> to set.</param>
            <param name="contentType">The content-type of the <see cref="T:Couchbase.Lite.Attachment" />.</param>
            <param name="content">The <see cref="T:Couchbase.Lite.Attachment" /> content.</param></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.SetAttachment(System.String,System.String,System.IO.Stream)">
            <summary>
            Sets the attachment with the given name.
            </summary>
            <remarks>
            Sets the <see cref="T:Couchbase.Lite.Attachment" /> with the given name.
            The <see cref="T:Couchbase.Lite.Attachment" /> data will be written to
            the <see cref="T:Couchbase.Lite.Database" /> when the
            <see cref="T:Couchbase.Lite.Revision" /> is saved.
            </remarks>
            <param name="name">The name of the <see cref="T:Couchbase.Lite.Attachment" /> to set.</param>
            <param name="contentType">The content-type of the <see cref="T:Couchbase.Lite.Attachment" />.</param>
            <param name="content">The <see cref="T:Couchbase.Lite.Attachment" /> content.</param></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.SetAttachment(System.String,System.String,System.Uri)">
            <summary>
            Sets the attachment with the given name.
            </summary>
            <remarks>
            Sets the <see cref="T:Couchbase.Lite.Attachment" /> with the given name.
            The <see cref="T:Couchbase.Lite.Attachment" /> data will be written to
            the <see cref="T:Couchbase.Lite.Database" /> when the
            <see cref="T:Couchbase.Lite.Revision" /> is saved.
            </remarks>
            <param name="name">The name of the <see cref="T:Couchbase.Lite.Attachment" /> to set.</param>
            <param name="contentType">The content-type of the <see cref="T:Couchbase.Lite.Attachment" />.</param>
            <param name="contentUrl">The URL of the <see cref="T:Couchbase.Lite.Attachment" /> content.</param></member>
        <member name="M:Couchbase.Lite.UnsavedRevision.RemoveAttachment(System.String)">
            <summary>
            Removes the <see cref="T:Couchbase.Lite.Attachment" />
            with the given name.
            </summary>
            <remarks>
            Removes the <see cref="T:Couchbase.Lite.Attachment" /> with the given name.
            The <see cref="T:Couchbase.Lite.Attachment" /> will be deleted from the
            Database when the Revision is saved.
            </remarks>
            <param name="name">
            The name of the <see cref="T:Couchbase.Lite.Attachment" /> to delete.
            </param></member>
        <member name="T:Couchbase.Lite.BlobKey">
            <summary>Key identifying a data blob.</summary>
            <remarks>Key identifying a data blob. This happens to be a SHA-1 digest.</remarks></member>
        <member name="M:Couchbase.Lite.BlobKey.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="base64Digest">
            string with base64'd digest, with leading "sha1-" attached.
            eg, "sha1-LKJ32423JK..."
            </param></member>
        <member name="M:Couchbase.Lite.BlobKey.DecodeBase64Digest(System.String)">
            <summary>
            Decode base64'd digest into a byte array that is suitable for use
            as a blob key.
            </summary>
            <remarks>
            Decode base64'd digest into a byte array that is suitable for use
            as a blob key.
            </remarks>
            <param name="base64Digest">
            string with base64'd digest, with leading "sha1-" attached.
            eg, "sha1-LKJ32423JK..."
            </param>
            <returns>a byte[] blob key</returns></member>
        <member name="T:Couchbase.Lite.BlobStore">
            <summary>A persistent content-addressable store for arbitrary-size data blobs.</summary>
            <remarks>
            A persistent content-addressable store for arbitrary-size data blobs.
            Each blob is stored as a file named by its SHA-1 digest.
            </remarks></member>
        <member name="M:Couchbase.Lite.BlobStore.GetBytesFromFile(Sharpen.FilePath)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="T:Couchbase.Lite.BlobStoreWriter">
            <summary>Lets you stream a large attachment to a BlobStore asynchronously, e.g.</summary>
            <remarks>Lets you stream a large attachment to a BlobStore asynchronously, e.g. from a network download.
            </remarks></member>
        <member name="F:Couchbase.Lite.BlobStoreWriter.store">
            <summary>The underlying blob store where it should be stored.</summary>
            <remarks>The underlying blob store where it should be stored.</remarks></member>
        <member name="F:Couchbase.Lite.BlobStoreWriter.length">
            <summary>The number of bytes in the blob.</summary>
            <remarks>The number of bytes in the blob.</remarks></member>
        <member name="F:Couchbase.Lite.BlobStoreWriter.blobKey">
            <summary>After finishing, this is the key for looking up the blob through the CBL_BlobStore.
            </summary>
            <remarks>After finishing, this is the key for looking up the blob through the CBL_BlobStore.
            </remarks></member>
        <member name="F:Couchbase.Lite.BlobStoreWriter.md5DigestResult">
            <summary>After finishing, store md5 digest result here</summary></member>
        <member name="F:Couchbase.Lite.BlobStoreWriter.sha1Digest">
            <summary>Message digest for sha1 that is updated as data is appended</summary></member>
        <member name="M:Couchbase.Lite.BlobStoreWriter.OpenTempFile">
            <exception cref="T:System.IO.FileNotFoundException"></exception></member>
        <member name="M:Couchbase.Lite.BlobStoreWriter.AppendData(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Appends data to the blob.</summary>
            <remarks>Appends data to the blob. Call this when new data is available.</remarks></member>
        <member name="M:Couchbase.Lite.BlobStoreWriter.Finish">
            <summary>Call this after all the data has been added.</summary></member>
        <member name="M:Couchbase.Lite.BlobStoreWriter.Cancel">
            <summary>Call this to cancel before finishing the data.</summary></member>
        <member name="M:Couchbase.Lite.BlobStoreWriter.Install">
            <summary>Installs a finished blob into the store.</summary></member>
        <member name="T:Couchbase.Lite.Storage.ConflictResolutionStrategy">
            <summary>
            Indicates the action to take when an insert action finds an existing entry
            </summary></member>
        <member name="F:Couchbase.Lite.Storage.ConflictResolutionStrategy.None">
            <summary>
            Do nothing, and error out
            </summary></member>
        <member name="F:Couchbase.Lite.Storage.ConflictResolutionStrategy.Ignore">
            <summary>
            Abort the operation and continue
            </summary></member>
        <member name="F:Couchbase.Lite.Storage.ConflictResolutionStrategy.Replace">
            <summary>
            Replace the existing entry with the one being inserted
            </summary></member>
        <member name="F:Couchbase.Lite.Storage.ContentValues.mValues">
            <summary>Holds the actual values</summary></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.#ctor">
            <summary>Creates an empty set of values using the default initial size</summary></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.#ctor(System.Int32)">
            <summary>Creates an empty set of values using the given initial size</summary>
            <param name="size">the initial size of the set of values</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.#ctor(Couchbase.Lite.Storage.ContentValues)">
            <summary>Creates a set of values copied from the given set</summary>
            <param name="from">the values to copy</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.String)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.PutAll(Couchbase.Lite.Storage.ContentValues)">
            <summary>Adds all values from the passed in ContentValues.</summary>
            <remarks>Adds all values from the passed in ContentValues.</remarks>
            <param name="other">the ContentValues from which to copy</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Byte)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Int16)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Int32)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Int64)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Single)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Double)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Boolean)">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Put(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Adds a value to the set.</summary>
            <remarks>Adds a value to the set.</remarks>
            <param name="key">the name of the value to put</param>
            <param name="value">the data for the value to put</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.PutNull(System.String)">
            <summary>Adds a null value to the set.</summary>
            <remarks>Adds a null value to the set.</remarks>
            <param name="key">the name of the value to make null</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Size">
            <summary>Returns the number of values.</summary>
            <remarks>Returns the number of values.</remarks>
            <returns>the number of values</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Remove(System.String)">
            <summary>Remove a single value.</summary>
            <remarks>Remove a single value.</remarks>
            <param name="key">the name of the value to remove</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Clear">
            <summary>Removes all values.</summary>
            <remarks>Removes all values.</remarks></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.ContainsKey(System.String)">
            <summary>Returns true if this object has the named value.</summary>
            <remarks>Returns true if this object has the named value.</remarks>
            <param name="key">the value to check for</param>
            <returns>
            <code>true</code>
            if the value is present,
            <code>false</code>
            otherwise
            </returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.Get(System.String)">
            <summary>
            Returns the value of the specified key, or null if not present
            </summary>
            <param name="key">The key to check</param></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsString(System.String)">
            <summary>
            Gets a value and converts it to a String.
            </summary>
            <param name="key">the value to get</param>
            <returns>the String for the value</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsLong(System.String)">
            <summary>
            Gets a value and converts it to a Long.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Long value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsInteger(System.String)">
            <summary>
            Gets a value and converts it to an Integer.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Integer value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsShort(System.String)">
            <summary>
            Gets a value and converts it to a Short.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Short value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsByte(System.String)">
            <summary>
            Gets a value and converts it to a Byte.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Byte value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsDouble(System.String)">
            <summary>
            Gets a value and converts it to a Double.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Double value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsFloat(System.String)">
            <summary>
            Gets a value and converts it to a Float.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Float value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsBoolean(System.String)">
            <summary>
            Gets a value and converts it to a Boolean.
            </summary>
            <param name="key">the value to get</param>
            <returns>the Boolean value, or null if the value is missing or cannot be converted</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.GetAsByteArray(System.String)">
            <summary>
            Gets a value that is a byte array.
            </summary>
            <remarks>
            Gets a value that is a byte array. Note that this method will not convert
            any other types to byte arrays.
            </remarks>
            <param name="key">the value to get</param>
            <returns>the byte[] value, or null is the value is missing or not a byte[]</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.ValueSet">
            <summary>
            Returns a set of all of the keys and values
            </summary>
            <returns>a set of all of the keys and values</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.KeySet">
            <summary>Returns a set of all of the keys</summary>
            <returns>a set of all of the keys</returns></member>
        <member name="M:Couchbase.Lite.Storage.ContentValues.ToString">
            <summary>
            Returns a string containing a concise, human-readable description of this object.
            </summary>
            <returns>a printable representation of this object.</returns></member>
        <member name="M:Couchbase.Lite.Cursor.#ctor(SQLitePCL.sqlite3_stmt)">
            <summary>
            Can throw an exception
            </summary>
            <param name="stmt">Statement.</param></member>
        <member name="M:Couchbase.Lite.JsonCollator.Compare(Couchbase.Lite.JsonCollationMode,System.String,System.String,System.Int32)">
            <summary>
            Compare two JSON Strings.
            </summary>
            <remarks>
            The comparison result is based on the specification linked below.
            http://wiki.apache.org/couchdb/View_collation#Collation_Specification.
            The method assumes that both input JSON strings parameters do not include
            any whitespace characters between each part of the JSON components.
            </remarks>
            <param name="mode">
            JsonCollationMode.Unicode: Unicode JSON String
            JsonCollationMode.Ascii: ASCII JSON String
            JsonCollationMode.Raw:  Raw JSON String
            </param>
            <param name="param1">the first json string to compare.</param>
            <param name="param2">the second json string to compare.</param>
            <param name="arrayLimit">the maximum number of the array element inside the json string to compare.</param>
            <returns>
            The value 0 if the param1 string is equal to the param2 string;
            a value -1 if the param1 is less than the param2 string;
            a value 1 if this string is greater than the string argument.
            </returns></member>
        <member name="M:Couchbase.Lite.RevIdCollator.Compare(System.String,System.String)">
            <summary>
            Compare two Revision ID strings.
            </summary>
            <remarks>
            A proper revision ID consists of a generation number, a hyphen, and an arbitrary suffix.
            Compare the generation numbers numerically, and then the suffixes lexicographically.
            If either string isn't a proper rev ID, fall back to lexicographic comparison.
            </remarks>
            <param name="rev1">Revision ID string to compare.</param>
            <param name="rev2">Revision ID string to compare.</param>
            <returns>
            The value 0 if the rev1 string is equal to the rev2 string;
            a value -1 if the rev1 is less than the rev2 string;
            a value 1 if this string is greater than the string argument.
            </returns></member>
        <member name="T:Couchbase.Lite.StatusCode">
            <summary>
            A list of statuses indicating various results and/or errors for Couchbase Lite
            operations
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Unknown">
            <summary>
            Unknown result (should not be used)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Ok">
            <summary>
            Successful completion (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Created">
            <summary>
            A new item was created (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Accepted">
            <summary>
            The operation has been successfully queued for execution (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.NotModified">
            <summary>
            The requested action is redundant and doesn't need to execute (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadRequest">
            <summary>
            An invalid request was received (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Unauthorized">
            <summary>
            The requesting user is not authorized to perform the action (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Forbidden">
            <summary>
            The requested action is not allowed to be executed by any user (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.NotFound">
            <summary>
            The requested item does not appear to exist (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.MethodNotAllowed">
            <summary>
            The wrong HTTP method was used when requesting an action to be performed (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.NotAcceptable">
            <summary>
            The server is unable to return an acceptable MIME type as specified in the HTTP headers (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Conflict">
            <summary>
            The submitted revision put a document into a conflict state (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.PreconditionFailed">
            <summary>
            A condition of the requested action was violated (e.g. Trying to create a DB when it already exists) (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.UnsupportedType">
            <summary>
            The server does not support this type of file (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadEncoding">
            <summary>
            The encoding type for the attachment on a revision is not supported
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadAttachment">
            <summary>
            The received attachment is corrupt
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.AttachmentNotFound">
            <summary>
            The attachment for the revision was not received
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadJson">
            <summary>
            The received JSON was invalid
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadId">
            <summary>
            A parameter was received that doesn't make sense for the action
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadParam">
            <summary>
            An invalid parameter was received
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Deleted">
            <summary>
            The document has been deleted
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.InternalServerError">
            <summary>
            Internal logic error (i.e. library problem) (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.NotImplemented">
            <summary>
            The logic has not been implemented yet (HTTP compliant)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.BadChangesFeed">
            <summary>
            An invalid changes feed was received from Sync Gateway
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.ChangesFeedTruncated">
            <summary>
            The changes feed from Sync Gateway was cut off
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.UpStreamError">
            <summary>
            An error was received fro Sync Gateway
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.DbError">
            <summary>
            A database error occurred (file locked, etc)
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.CorruptError">
            <summary>
            A corrupt database was found
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.AttachmentError">
            <summary>
            A problem with an attachment was found
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.CallbackError">
            <summary>
            A callback failed
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.Exception">
            <summary>
            Releated to 500, but not HTTP compliant
            </summary></member>
        <member name="F:Couchbase.Lite.StatusCode.DbBusy">
            <summary>
            The database file is busy, and cannot process changes at the moment
            </summary></member>
        <member name="T:Couchbase.Lite.Status">
            <summary>
            A class for encapsulating a status code, and querying various information about it
            </summary></member>
        <member name="P:Couchbase.Lite.Status.Code">
            <summary>
            The status code that this object holds
            </summary></member>
        <member name="P:Couchbase.Lite.Status.IsSuccessful">
            <summary>
            Gets whether or not the status code represents a successful action
            </summary></member>
        <member name="P:Couchbase.Lite.Status.IsError">
            <summary>
            Gets whether or not the status code represents a failed action
            </summary></member>
        <member name="M:Couchbase.Lite.Status.#ctor">
            <summary>
            Convenience constructor
            </summary></member>
        <member name="M:Couchbase.Lite.Status.#ctor(Couchbase.Lite.StatusCode)">
            <summary>
            Default constructor
            </summary>
            <param name="code">The status code to hold</param></member>
        <member name="M:Couchbase.Lite.Status.GetCode">
            <summary>
            Gets the status code
            </summary>
            <returns>The status code</returns></member>
        <member name="M:Couchbase.Lite.Status.SetCode(Couchbase.Lite.StatusCode)">
            <summary>
            Modifies the status code being held by this object
            </summary>
            <param name="code">The new status code</param></member>
        <member name="M:Couchbase.Lite.Status.ToHttpStatus(Couchbase.Lite.StatusCode)">
            <summary>
            Converts a StatusCode to an HTTP compliant status
            </summary>
            <returns>A tuple containing the status code, and message to return to the client</returns>
            <param name="status">The status code to convert</param></member>
        <member name="M:Couchbase.Lite.Status.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Couchbase.Lite.Status" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Couchbase.Lite.Status" />.</returns></member>
        <member name="M:Couchbase.Lite.Replicator.DefaultAuthHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="M:Couchbase.Lite.Util.FileDirUtils.CopyFile(System.IO.FileInfo,System.IO.FileInfo)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="M:Couchbase.Lite.Util.FileDirUtils.CopyFolder(System.IO.FileSystemInfo,System.IO.FileSystemInfo)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="M:Couchbase.Lite.Util.ILogger.V(System.String,System.String)">
            <summary>Send a VERBOSE message.</summary>
            <remarks>Send a VERBOSE message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.V(System.String,System.String,System.Exception)">
            <summary>Send a VERBOSE message and log the exception.</summary>
            <remarks>Send a VERBOSE message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.V(System.String,System.String,System.Object[])">
            <summary>Send a VERBOSE message and log the exception.</summary>
            <remarks>Send a VERBOSE message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.D(System.String,System.String)">
            <summary>Send a DEBUG message.</summary>
            <remarks>Send a DEBUG message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.D(System.String,System.String,System.Exception)">
            <summary>Send a DEBUG message and log the exception.</summary>
            <remarks>Send a DEBUG message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.D(System.String,System.String,System.Object[])">
            <summary>Send a DEBUG message and log the exception.</summary>
            <remarks>Send a DEBUG message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.I(System.String,System.String)">
            <summary>Send an INFO message.</summary>
            <remarks>Send an INFO message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.I(System.String,System.String,System.Exception)">
            <summary>Send a INFO message and log the exception.</summary>
            <remarks>Send a INFO message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.I(System.String,System.String,System.Object[])">
            <summary>Send a INFO message and log the exception.</summary>
            <remarks>Send a INFO message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.W(System.String,System.String)">
            <summary>Send a WARN message.</summary>
            <remarks>Send a WARN message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.W(System.String,System.Exception)">
            <summary>Send a WARN message.</summary>
            <remarks>Send a WARN message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="tr">The exception you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.W(System.String,System.String,System.Exception)">
            <summary>Send a WARN message and log the exception.</summary>
            <remarks>Send a WARN message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.W(System.String,System.String,System.Object[])">
            <summary>Send a WARN message and log the exception.</summary>
            <remarks>Send a WARN message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.E(System.String,System.String)">
            <summary>Send an ERROR message.</summary>
            <remarks>Send an ERROR message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.E(System.String,System.String,System.Exception)">
            <summary>Send a ERROR message and log the exception.</summary>
            <remarks>Send a ERROR message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.ILogger.E(System.String,System.String,System.Object[])">
            <summary>Send a ERROR message and log the exception.</summary>
            <remarks>Send a ERROR message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">Arguments for the string format variables.</param></member>
        <member name="T:Couchbase.Lite.Util.Log">
            <summary>
            Centralized logging facility.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.Log.SetLogger(Couchbase.Lite.Util.ILogger)">
            <summary>
            Sets the logger.
            </summary>
            <returns><c>true</c>, if Logger was set, <c>false</c> otherwise.</returns>
            <param name="customLogger">Custom logger.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.V(System.String,System.String)">
            <summary>Send a VERBOSE message.</summary>
            <remarks>Send a VERBOSE message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.V(System.String,System.String,System.Exception)">
            <summary>Send a VERBOSE message and log the exception.</summary>
            <remarks>Send a VERBOSE message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.Log.V(System.String,System.String,System.Object[])">
            <summary>Send a VERBOSE message and log the exception.</summary>
            <remarks>Send a VERBOSE message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.Log.D(System.String,System.String)">
            <summary>Send a DEBUG message.</summary>
            <remarks>Send a DEBUG message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.D(System.String,System.String,System.Exception)">
            <summary>Send a DEBUG message and log the exception.</summary>
            <remarks>Send a DEBUG message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.Log.D(System.String,System.String,System.Object[])">
            <summary>Send a DEBUG message and log the exception.</summary>
            <remarks>Send a DEBUG message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.Log.I(System.String,System.String)">
            <summary>Send an INFO message.</summary>
            <remarks>Send an INFO message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.I(System.String,System.String,System.Exception)">
            <summary>Send a INFO message and log the exception.</summary>
            <remarks>Send a INFO message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.Log.I(System.String,System.String,System.Object[])">
            <summary>Send a INFO message and log the exception.</summary>
            <remarks>Send a INFO message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.Log.W(System.String,System.String)">
            <summary>Send a WARN message.</summary>
            <remarks>Send a WARN message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.W(System.String,System.Exception)">
            <summary>Send a WARN message.</summary>
            <remarks>Send a WARN message.</remarks>
            <param name="tag">Tag.</param>
            <param name="tr">Exception</param></member>
        <member name="M:Couchbase.Lite.Util.Log.W(System.String,System.String,System.Exception)">
            <summary>Send a WARN message and log the exception.</summary>
            <remarks>Send a WARN message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.Log.W(System.String,System.String,System.Object[])">
            <summary>Send a WARN message and log the exception.</summary>
            <remarks>Send a WARN message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <member name="M:Couchbase.Lite.Util.Log.E(System.String,System.String)">
            <summary>Send an ERROR message.</summary>
            <remarks>Send an ERROR message.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param></member>
        <member name="M:Couchbase.Lite.Util.Log.E(System.String,System.String,System.Exception)">
            <summary>Send a ERROR message and log the exception.</summary>
            <remarks>Send a ERROR message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="msg">The message you would like logged.</param>
            <param name="tr">An exception to log</param></member>
        <member name="M:Couchbase.Lite.Util.Log.E(System.String,System.String,System.Object[])">
            <summary>Send a ERROR message and log the exception.</summary>
            <remarks>Send a ERROR message and log the exception.</remarks>
            <param name="tag">
            Used to identify the source of a log message.  It usually identifies
            the class or activity where the log call occurs.
            </param>
            <param name="format">The message you would like logged.</param>
            <param name="args">string format arguments</param></member>
        <!--FIXME: Invalid documentation markup was found for member T:Couchbase.Lite.Util.LruCache`2-->
        <member name="F:Couchbase.Lite.Util.LruCache`2.size">
            <summary>Size of this cache in units.</summary>
            <remarks>Size of this cache in units. Not necessarily the number of elements.</remarks></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.#ctor(System.Int32)">
            <param name="maxSize">
            for caches that do not override
            <see cref="!:LruCache&lt;K, V&gt;.SizeOf(object, object)">LruCache&lt;K, V&gt;.SizeOf(object, object)
            </see>
            , this is
            the maximum number of entries in the cache. For all other caches,
            this is the maximum sum of the sizes of the entries in this cache.
            </param></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Resize(System.Int32)">
            <summary>Sets the size of the cache.</summary>
            <remarks>Sets the size of the cache.</remarks>
            <param name="maxSize">The new maximum size.</param>
            <hide></hide></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Get(`0)">
            <summary>
            Returns the value for
            <code>key</code>
            if it exists in the cache or can be
            created by
            <code>#create</code>
            . If a value was returned, it is moved to the
            head of the queue. This returns null if a value is not cached and cannot
            be created.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Put(`0,`1)">
            <summary>
            Caches
            <code>value</code>
            for
            <code>key</code>
            . The value is moved to the head of
            the queue.
            </summary>
            <returns>
            the previous value mapped by
            <code>key</code>
            .
            </returns></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Remove(`0)">
            <summary>
            Removes the entry for
            <code>key</code>
            if it exists.
            </summary>
            <returns>
            the previous value mapped by
            <code>key</code>
            .
            </returns></member>
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.Util.LruCache`2.EntryRemoved(System.Boolean,`0,`1,`1)-->
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.Util.LruCache`2.Create(`0)-->
        <!--FIXME: Invalid documentation markup was found for member M:Couchbase.Lite.Util.LruCache`2.SizeOf(`0,`1)-->
        <member name="M:Couchbase.Lite.Util.LruCache`2.EvictAll">
            <summary>
            Clear the cache, calling
            <see cref="!:LruCache&lt;K, V&gt;.EntryRemoved(bool, object, object, object)">LruCache&lt;K, V&gt;.EntryRemoved(bool, object, object, object)
            </see>
            on each removed entry.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Size">
            <summary>
            For caches that do not override
            <see cref="!:LruCache&lt;K, V&gt;.SizeOf(object, object)">LruCache&lt;K, V&gt;.SizeOf(object, object)
            </see>
            , this returns the number
            of entries in the cache. For all other caches, this returns the sum of
            the sizes of the entries in this cache.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.MaxSize">
            <summary>
            For caches that do not override
            <see cref="!:LruCache&lt;K, V&gt;.SizeOf(object, object)">LruCache&lt;K, V&gt;.SizeOf(object, object)
            </see>
            , this returns the maximum
            number of entries in the cache. For all other caches, this returns the
            maximum sum of the sizes of the entries in this cache.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.HitCount">
            <summary>
            Returns the number of times
            <see cref="!:LruCache&lt;K, V&gt;.Get(object)">LruCache&lt;K, V&gt;.Get(object)</see>
            returned a value that was
            already present in the cache.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.MissCount">
            <summary>
            Returns the number of times
            <see cref="!:LruCache&lt;K, V&gt;.Get(object)">LruCache&lt;K, V&gt;.Get(object)</see>
            returned null or required a new
            value to be created.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.CreateCount">
            <summary>
            Returns the number of times
            <see cref="!:LruCache&lt;K, V&gt;.Create(object)">LruCache&lt;K, V&gt;.Create(object)</see>
            returned a value.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.PutCount">
            <summary>
            Returns the number of times
            <see cref="!:LruCache&lt;K, V&gt;.Put(object, object)">LruCache&lt;K, V&gt;.Put(object, object)
            </see>
            was called.
            </summary></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.EvictionCount">
            <summary>Returns the number of values that have been evicted.</summary>
            <remarks>Returns the number of values that have been evicted.</remarks></member>
        <member name="M:Couchbase.Lite.Util.LruCache`2.Snapshot">
            <summary>
            Returns a copy of the current contents of the cache, ordered from least
            recently accessed to most recently accessed.
            </summary>
            <remarks>
            Returns a copy of the current contents of the cache, ordered from least
            recently accessed to most recently accessed.
            </remarks></member>
        <member name="M:Couchbase.Lite.Misc.ByteArrayResultForQuery(Couchbase.Lite.Storage.ISQLiteStorageEngine,System.String,System.String[])">
            <exception cref="T:Couchbase.Lite.Storage.SQLException"></exception></member>
        <member name="M:Couchbase.Lite.Misc.IsEqual(System.Object,System.Object)">
            <summary>Like equals, but works even if either/both are null</summary>
            <param name="obj1">object1 being compared</param>
            <param name="obj2">object2 being compared</param>
            <returns>
            true if both are non-null and obj1.equals(obj2), or true if both are null.
            otherwise return false.
            </returns></member>
        <member name="T:Couchbase.Lite.Support.SequenceMap">
            <summary>
            A data structure representing a type of array that allows object values to be added to the end, and removed in arbitrary order;
            it's used by the replicator to keep track of which revisions have been transferred and what sequences to checkpoint.
            </summary>
            <remarks>
            A data structure representing a type of array that allows object values to be added to the end, and removed in arbitrary order;
            it's used by the replicator to keep track of which revisions have been transferred and what sequences to checkpoint.
            </remarks></member>
        <member name="M:Couchbase.Lite.Support.SequenceMap.AddValue(System.String)">
            <summary>Adds a value to the map, assigning it a sequence number and returning it.</summary>
            <remarks>
            Adds a value to the map, assigning it a sequence number and returning it.
            Sequence numbers start at 1 and increment from there.
            </remarks></member>
        <member name="M:Couchbase.Lite.Support.SequenceMap.RemoveSequence(System.Int64)">
            <summary>Removes a sequence and its associated value.</summary>
            <remarks>Removes a sequence and its associated value.</remarks></member>
        <member name="M:Couchbase.Lite.Support.SequenceMap.GetCheckpointedSequence">
            <summary>Returns the maximum consecutively-removed sequence number.</summary>
            <remarks>
            Returns the maximum consecutively-removed sequence number.
            This is one less than the minimum remaining sequence number.
            </remarks></member>
        <member name="M:Couchbase.Lite.Support.SequenceMap.GetCheckpointedValue">
            <summary>Returns the value associated with the checkpointedSequence.</summary></member>
        <member name="M:Couchbase.Lite.Util.StringUtils.Strtod(System.String,System.Int32,System.Int32@)">
            <summary>
            Parses the Substring interpreting its content as a floating point number and returns
            its value as a double.
            Ported from C language strtod method.
            Original : http://www.opensource.apple.com/source/tcl/tcl-14/tcl/compat/strtod.c
            </summary>
            <remarks>
            Parses the Substring interpreting its content as a floating point number and returns
            its value as a double.
            </remarks>
            <param name="str">Input string.</param>
            <param name="start">Starting index of the substring to be converted to a foloting point number.</param>
            <param name="endPosition">Output index pointing to the first character after the number.</param>
            <returns>
            The double-precision floating-point representation of the characters in string.
            </returns></member>
        <member name="M:Couchbase.Lite.Util.StringUtils.ConvertFromUnpaddedBase64String(System.String)">
            <summary>
            Converts an un-padded base64 encoded string into a byte array.
            </summary>
            <returns>The from unpadded base64 string.</returns>
            <remarks>
            Ensures that Base64 encoded strings from other platforms have the padding that .NET expects.
            </remarks>
            <param name="base64String">Base64 string.</param></member>
        <member name="F:Couchbase.Lite.Util.URIUtils.NotFound">
            <summary>Index of a component which was not found.</summary>
            <remarks>Index of a component which was not found.</remarks></member>
        <member name="F:Couchbase.Lite.Util.URIUtils.Utf8Encoding">
            <summary>Default encoding.</summary>
            <remarks>Default encoding.</remarks></member>
        <member name="F:Couchbase.Lite.Util.URIUtils.NotHierarchical">
            <summary>
            Error message presented when a user tries to treat an opaque URI as
            hierarchical.
            </summary>
            <remarks>
            Error message presented when a user tries to treat an opaque URI as
            hierarchical.
            </remarks></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.GetQueryParameter(System.Uri,System.String)">
            <summary>Searches the query string for the first value with the given key.</summary>
            <remarks>Searches the query string for the first value with the given key.</remarks>
            <param name="key">which will be encoded</param>
            <exception cref="T:System.NotSupportedException">if this isn't a hierarchical URI</exception>
            <exception cref="T:System.ArgumentNullException">if key is null</exception>
            <returns>the decoded value or null if no parameter is found</returns></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.Encode(System.String)">
            <summary>
            Encodes characters in the given string as '%'-escaped octets
            using the UTF-8 scheme.
            </summary>
            <remarks>
            Encodes characters in the given string as '%'-escaped octets
            using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
            ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
            all other characters.
            </remarks>
            <param name="s">string to encode</param>
            <returns>
            an encoded version of s suitable for use as a URI component,
            or null if s is null
            </returns></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.Encode(System.String,System.String)">
            <summary>
            Encodes characters in the given string as '%'-escaped octets
            using the UTF-8 scheme.
            </summary>
            <remarks>
            Encodes characters in the given string as '%'-escaped octets
            using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers
            ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes
            all other characters with the exception of those specified in the
            allow argument.
            </remarks>
            <param name="s">string to encode</param>
            <param name="allow">
            set of additional characters to allow in the encoded form,
            null if no characters should be skipped
            </param>
            <returns>
            an encoded version of s suitable for use as a URI component,
            or null if s is null
            </returns></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.IsAllowed(System.Char,System.String)">
            <summary>Returns true if the given character is allowed.</summary>
            <remarks>Returns true if the given character is allowed.</remarks>
            <param name="c">character to check</param>
            <param name="allow">characters to allow</param>
            <returns>
            true if the character is allowed or false if it should be
            encoded
            </returns></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.Decode(System.String,System.Boolean,System.Text.Encoding)">
            <param name="convertPlus">true to convert '+' to ' '.</param></member>
        <member name="M:Couchbase.Lite.Util.URIUtils.HexToInt(System.Char)">
            <summary>
            Like
            <see cref="!:char.Digit(char, int)">char.Digit(char, int)</see>
            , but without support for non-ASCII
            characters.
            </summary></member>
        <member name="M:Couchbase.Lite.Storage.CouchbaseSqliteJsonUnicodeCollationFunction.Compare(System.Object,System.String,System.String)">
            <Docs>Implements the custom collection for JSON strings.</Docs>
            <summary>
            Couchbase custom JSON collation algorithm.
            </summary>
            <param name="userData"></param>
            <param name="param1"></param>
            <param name="param2"></param></member>
        <member name="M:Couchbase.Lite.Storage.CouchbaseSqliteJsonAsciiCollationFunction.Compare(System.Object,System.String,System.String)">
            <Docs>Implements the custom collection for JSON strings.</Docs>
            <summary>
            Couchbase custom JSON collation algorithm.
            </summary>
            <remarks>
            This is woefully incomplete.
            For full details, see https://github.com/couchbase/couchbase-lite-ios/blob/580c5f65ebda159ce5d0ce1f75adc16955a2a6ff/Source/CBLCollateJSON.m.
            </remarks>
            <param name="args"></param></member>
        <member name="M:Couchbase.Lite.Storage.CouchbaseSqliteJsonRawCollationFunction.Compare(System.Object,System.String,System.String)">
            <Docs>Implements the custom collection for JSON strings.</Docs>
            <summary>
            Couchbase custom JSON collation algorithm.
            </summary>
            <remarks>
            This is woefully incomplete.
            For full details, see https://github.com/couchbase/couchbase-lite-ios/blob/580c5f65ebda159ce5d0ce1f75adc16955a2a6ff/Source/CBLCollateJSON.m.
            </remarks>
            <param name="args"></param></member>
        <member name="M:Couchbase.Lite.Storage.CouchbaseSqliteRevIdCollationFunction.Compare(System.Object,System.String,System.String)">
            <Docs>Implements a custom collation for Revision ID strings.</Docs>
            <summary>
            Couchbase custom Revision ID collation algorithm.
            </summary>
            <remarks>
            For full details, see https://github.com/couchbase/couchbase-lite-ios/blob/master/Source/CBL_Revision.m
            </remarks>
            <param name="args"></param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.ExecSQL(System.String,System.Object[])">
            <summary>
            Execute any SQL that changes the database.
            </summary>
            <param name="sql">Sql.</param>
            <param name="paramArgs">Parameter arguments.</param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.IntransactionRawQuery(System.String,System.Object[])">
            <summary>
            Executes only read-only SQL.
            </summary>
            <returns>The query.</returns>
            <param name="sql">Sql.</param>
            <param name="paramArgs">Parameter arguments.</param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.RawQuery(System.String,System.Object[])">
            <summary>
            Executes only read-only SQL.
            </summary>
            <returns>The query.</returns>
            <param name="sql">Sql.</param>
            <param name="paramArgs">Parameter arguments.</param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.GetUpdateCommand(System.String,Couchbase.Lite.Storage.ContentValues,System.String,System.String[])">
            <summary>
            Avoids the additional database trip that using SqliteCommandBuilder requires.
            </summary>
            <returns>The update command.</returns>
            <param name="table">Table.</param>
            <param name="values">Values.</param>
            <param name="whereClause">Where clause.</param>
            <param name="whereArgs">Where arguments.</param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.GetInsertCommand(System.String,Couchbase.Lite.Storage.ContentValues,Couchbase.Lite.Storage.ConflictResolutionStrategy)">
            <summary>
            Avoids the additional database trip that using SqliteCommandBuilder requires.
            </summary>
            <returns>The insert command.</returns>
            <param name="table">Table.</param>
            <param name="values">Values.</param>
            <param name="conflictResolutionStrategy">Conflict resolution strategy.</param></member>
        <member name="M:Couchbase.Lite.SqlitePCLRawStorageEngine.GetDeleteCommand(System.String,System.String,System.String[])">
            <summary>
            Avoids the additional database trip that using SqliteCommandBuilder requires.
            </summary>
            <returns>The delete command.</returns>
            <param name="table">Table.</param>
            <param name="whereClause">Where clause.</param>
            <param name="whereArgs">Where arguments.</param></member>
        <member name="T:Couchbase.Lite.INetworkReachabilityManager">
            <summary>
            The interface governing an object which can check network reachability
            and react to changes in reachability
            </summary></member>
        <member name="E:Couchbase.Lite.INetworkReachabilityManager.StatusChanged">
            <summary>
            Occurs when reachability changes.
            </summary></member>
        <member name="M:Couchbase.Lite.INetworkReachabilityManager.CanReach(System.String)">
            <summary>
            Returns whether or not a given endpoint is reachable
            </summary>
            <returns><c>true</c> if this instance can reach the specified endpoint; otherwise, <c>false</c>.</returns>
            <param name="remoteUri">The endpoint to test</param></member>
        <member name="M:Couchbase.Lite.INetworkReachabilityManager.StartListening">
            <summary>
            Start listening for changes in network reachability
            </summary></member>
        <member name="M:Couchbase.Lite.INetworkReachabilityManager.StopListening">
            <summary>
            Stop listening for changes in network reachability
            </summary></member>
        <member name="T:Couchbase.Lite.NetworkReachabilityStatus">
            <summary>
            The current status of the network
            </summary></member>
        <member name="F:Couchbase.Lite.NetworkReachabilityStatus.Unknown">
            <summary>
            The status has not been evaluated yet
            </summary></member>
        <member name="F:Couchbase.Lite.NetworkReachabilityStatus.Reachable">
            <summary>
            The network is reachable
            </summary></member>
        <member name="F:Couchbase.Lite.NetworkReachabilityStatus.Unreachable">
            <summary>
            The network is not reachable
            </summary></member>
        <member name="T:Couchbase.Lite.NetworkReachabilityChangeEventArgs">
            <summary>
            Network reachability change event arguments.
            </summary>
            <remarks>
            Need this class because .NET's NetworkAvailabilityEventArgs
            only has an internal constructor.
            </remarks></member>
        <member name="P:Couchbase.Lite.NetworkReachabilityChangeEventArgs.Status">
            <summary>
            Gets the current network reachability status
            </summary>
            <value>The status.</value></member>
        <member name="M:Couchbase.Lite.NetworkReachabilityChangeEventArgs.#ctor(Couchbase.Lite.NetworkReachabilityStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">The current network reachability status</param></member>
        <member name="T:Couchbase.Lite.DocumentContentOptions">
            <summary>
            Options for what metadata to include in document bodies
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.None">
            <summary>
            Include only the default information
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.IncludeAttachments">
            <summary>
            Include attachment data
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.IncludeConflicts">
            <summary>
            Include currently conflicting revisions
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.IncludeRevs">
            <summary>
            Include a list of revisions
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.IncludeRevsInfo">
            <summary>
            Include the status of each revision (i.e. whether available, missing, or deleted)
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.IncludeLocalSeq">
            <summary>
            Include the latest sequence number in the database
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.NoBody">
            <summary>
            Don't include the JSON properties
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.BigAttachmentsFollow">
            <summary>
            Attachments over a certain size are sent via a multipart response
            </summary></member>
        <member name="F:Couchbase.Lite.DocumentContentOptions.NoAttachments">
            <summary>
            Don't include attachments
            </summary></member>
        <member name="T:Couchbase.Lite.NetworkReachabilityManager">
            <summary>
            This uses the NetworkAvailability API to listen for network reachability
            change events and fires off changes internally.
            </summary></member>
        <member name="M:Couchbase.Lite.NetworkReachabilityManager.StartListening">
            <summary>This method starts listening for network connectivity state changes.</summary>
            <remarks>This method starts listening for network connectivity state changes.</remarks></member>
        <member name="M:Couchbase.Lite.NetworkReachabilityManager.StopListening">
            <summary>This method stops this class from listening for network changes.</summary>
            <remarks>This method stops this class from listening for network changes.</remarks></member>
        <member name="M:Couchbase.Lite.NetworkReachabilityManager.OnNetworkChange(System.Object,System.Net.NetworkInformation.NetworkAvailabilityEventArgs)">
            <summary>Notify listeners that the network is now reachable/unreachable.</summary></member>
        <member name="M:Couchbase.Lite.Util.StreamUtils.CopyStreamsToFolder(System.Collections.Generic.IDictionary{System.String,System.IO.Stream},Sharpen.FilePath)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="M:Couchbase.Lite.Util.StreamUtils.CopyStreamToFile(System.IO.Stream,Sharpen.FilePath)">
            <exception cref="T:System.IO.IOException"></exception></member>
        <member name="M:Couchbase.Lite.Replicator.BulkDownloader.#ctor(System.Threading.Tasks.TaskFactory,Couchbase.Lite.Support.IHttpClientFactory,System.Uri,System.Collections.Generic.IList{Couchbase.Lite.Internal.RevisionInternal},Couchbase.Lite.Database,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationTokenSource)">
            <exception cref="T:System.Exception"></exception></member>
        <member name="M:Couchbase.Lite.Replicator.BulkDownloader.StartedPart(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>This method is called when a part's headers have been parsed, before its data is parsed.
            </summary>
            <remarks>This method is called when a part's headers have been parsed, before its data is parsed.
            </remarks></member>
        <member name="M:Couchbase.Lite.Replicator.BulkDownloader.AppendToPart(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>This method is called to append data to a part's body.</summary>
            <remarks>This method is called to append data to a part's body.</remarks></member>
        <member name="M:Couchbase.Lite.Replicator.BulkDownloader.FinishedPart">
            <summary>This method is called when a part is complete.</summary>
            <remarks>This method is called when a part is complete.</remarks></member>
        <member name="M:Couchbase.Lite.Replicator.RemoteRequest.RetryRequest">
            <summary>
            Retry this remote request, unless we've already retried MAX_RETRIES times
            NOTE: This assumes all requests are idempotent, since even though we got an error back, the
            request might have succeeded on the remote server, and by retrying we'd be issuing it again.
            </summary>
            <remarks>
            Retry this remote request, unless we've already retried MAX_RETRIES times
            NOTE: This assumes all requests are idempotent, since even though we got an error back, the
            request might have succeeded on the remote server, and by retrying we'd be issuing it again.
            PUT and POST requests aren't generally idempotent, but the ones sent by the replicator are.
            </remarks>
            <returns>true if going to retry the request, false otherwise</returns></member>
        <member name="M:Couchbase.Lite.Util.SingleTaskThreadpoolScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param></member>
        <member name="M:Couchbase.Lite.Util.SingleThreadScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param></member>
        <member name="T:Couchbase.Lite.Replicator.ChangesFeedMode">
            <summary>
            The mode to send or request a changes feed in
            </summary></member>
        <member name="F:Couchbase.Lite.Replicator.ChangesFeedMode.Normal">
            <summary>
            A one-shot
            </summary></member>
        <member name="F:Couchbase.Lite.Replicator.ChangesFeedMode.LongPoll">
            <summary>
            The connection will remain open until the next change made to the database, and then the information
            will be sent and the connection closed
            </summary></member>
        <member name="F:Couchbase.Lite.Replicator.ChangesFeedMode.Continuous">
            <summary>
            Similar to LongPoll, but the connection remains open indefinitely
            </summary></member>
        <member name="F:Couchbase.Lite.Replicator.ChangesFeedMode.EventSource">
            <summary>
            Uses the Mozilla event source format to sent changes continuously
            </summary></member>
        <member name="T:Couchbase.Lite.Views.BuiltinReduceFunctions">
            <summary>
            Class containing the built in Reduce functions (e.g. count, sum, min) for use in creating
            views in Couchbase Lite
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Count">
            <summary>
            A function that counts the number of documents contained in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Sum">
            <summary>
            A function that adds all of the items contained in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Min">
            <summary>
            A function that retrieves the minimum value in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Max">
            <summary>
            A function that retrieves the maximum value in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Average">
            <summary>
            A function that calculates the average of all the values in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Median">
            <summary>
            A function that calculates the median of all the values in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.StdDev">
            <summary>
            A function that calculates the standard deviation for all the values in the map
            </summary></member>
        <member name="F:Couchbase.Lite.Views.BuiltinReduceFunctions.Stats">
            <summary>
            A function that outputs various statistics about the map (count, sum, squared sum, min, and max)
            </summary></member>
    </members>
</doc>
